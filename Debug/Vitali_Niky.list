
Vitali_Niky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004924  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  08004ac4  08004ac4  00005ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  000070fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  000070fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080053f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200000fc  080054f4  000070fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080054f4  000073dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd2f  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4e  00000000  00000000  00012e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00014ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000810  00000000  00000000  000154e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001611b  00000000  00000000  00015cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d75a  00000000  00000000  0002be13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c69  00000000  00000000  0003956d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c11d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003060  00000000  00000000  000c121c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000fc 	.word	0x200000fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004aac 	.word	0x08004aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000100 	.word	0x20000100
 80001dc:	08004aac 	.word	0x08004aac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <configura_dot_duration>:
    "-----", ".----", "..---", "...--", "....-", ".....",
    "-....", "--...", "---..", "----."
};

// ===================== IMPOSTAZIONI =====================
void configura_dot_duration() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
    char input[16];
    const char* prompt = 	"Please enter a value between 50 and 3000 ms\r\n"
 80005e2:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <configura_dot_duration+0xcc>)
 80005e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
							"Dash duration = 3 × dot duration\r\n"
							"Letter gap = 3 × dot duration\r\n"
							"Word gap = 7 × dot duration\r\n"
							"\r\n"
							"Enter dot duration (ms):\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 80005e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80005e8:	f7ff fe04 	bl	80001f4 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80005f6:	482d      	ldr	r0, [pc, #180]	@ (80006ac <configura_dot_duration+0xd0>)
 80005f8:	f003 f8bc 	bl	8003774 <HAL_UART_Transmit>
    if (ricevi_comando_uart(input)) return;
 80005fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fc09 	bl	8000e18 <ricevi_comando_uart>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d148      	bne.n	800069e <configura_dot_duration+0xc2>
    uint32_t nuovo_dot = atoi(input);
 800060c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fd01 	bl	8004018 <atoi>
 8000616:	4603      	mov	r3, r0
 8000618:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (nuovo_dot >= 50 && nuovo_dot <= 3000) {
 800061a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800061c:	2b31      	cmp	r3, #49	@ 0x31
 800061e:	d930      	bls.n	8000682 <configura_dot_duration+0xa6>
 8000620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000622:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000626:	4293      	cmp	r3, r2
 8000628:	d82b      	bhi.n	8000682 <configura_dot_duration+0xa6>
        dot_duration  = nuovo_dot;
 800062a:	4a21      	ldr	r2, [pc, #132]	@ (80006b0 <configura_dot_duration+0xd4>)
 800062c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800062e:	6013      	str	r3, [r2, #0]
        dash_duration = 3 * dot_duration;
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <configura_dot_duration+0xd4>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	4a1e      	ldr	r2, [pc, #120]	@ (80006b4 <configura_dot_duration+0xd8>)
 800063c:	6013      	str	r3, [r2, #0]
        letter_gap    = 3 * dot_duration;
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <configura_dot_duration+0xd4>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <configura_dot_duration+0xdc>)
 800064a:	6013      	str	r3, [r2, #0]
        word_gap      = 7 * dot_duration;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <configura_dot_duration+0xd4>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4613      	mov	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <configura_dot_duration+0xe0>)
 8000658:	6013      	str	r3, [r2, #0]
        char conferma[64];
        sprintf(conferma, "Dot duration set to %lu ms\r\n", dot_duration);
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <configura_dot_duration+0xd4>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4917      	ldr	r1, [pc, #92]	@ (80006c0 <configura_dot_duration+0xe4>)
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fd60 	bl	8004128 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)conferma, strlen(conferma), HAL_MAX_DELAY);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdc2 	bl	80001f4 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	1d39      	adds	r1, r7, #4
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <configura_dot_duration+0xd0>)
 800067c:	f003 f87a 	bl	8003774 <HAL_UART_Transmit>
    if (nuovo_dot >= 50 && nuovo_dot <= 3000) {
 8000680:	e00e      	b.n	80006a0 <configura_dot_duration+0xc4>
    } else {
        const char* err = 	"Invalid value. Range: 50 - 1000 ms\r\n"
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <configura_dot_duration+0xe8>)
 8000684:	657b      	str	r3, [r7, #84]	@ 0x54
        					"Dot duration will be set to default value: 100 ms\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8000686:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000688:	f7ff fdb4 	bl	80001f4 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <configura_dot_duration+0xd0>)
 8000698:	f003 f86c 	bl	8003774 <HAL_UART_Transmit>
 800069c:	e000      	b.n	80006a0 <configura_dot_duration+0xc4>
    if (ricevi_comando_uart(input)) return;
 800069e:	bf00      	nop
    }
}
 80006a0:	3760      	adds	r7, #96	@ 0x60
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	08004bac 	.word	0x08004bac
 80006ac:	20000220 	.word	0x20000220
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000004 	.word	0x20000004
 80006b8:	20000008 	.word	0x20000008
 80006bc:	2000000c 	.word	0x2000000c
 80006c0:	08004c70 	.word	0x08004c70
 80006c4:	08004c90 	.word	0x08004c90

080006c8 <morse_init>:




/*************************** Funzioni di Inizializzazione ***************************/
void morse_init(MorseContext* ctx) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    ctx->dot_duration = dot_duration;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <morse_init+0x28>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]
    ctx->morse_word_index = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	741a      	strb	r2, [r3, #16]
    ctx->morse_word[0] = '\0';
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	745a      	strb	r2, [r3, #17]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000000 	.word	0x20000000

080006f4 <add_morse_symbol>:

void add_morse_symbol(MorseContext* ctx, char symbol) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
    if (ctx->morse_word_index < sizeof(ctx->morse_word) - 1) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7c1b      	ldrb	r3, [r3, #16]
 8000704:	2b62      	cmp	r3, #98	@ 0x62
 8000706:	d811      	bhi.n	800072c <add_morse_symbol+0x38>
        ctx->morse_word[ctx->morse_word_index++] = symbol;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7c1b      	ldrb	r3, [r3, #16]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	b2d1      	uxtb	r1, r2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	7411      	strb	r1, [r2, #16]
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	78fa      	ldrb	r2, [r7, #3]
 800071c:	745a      	strb	r2, [r3, #17]
        ctx->morse_word[ctx->morse_word_index] = '\0';
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7c1b      	ldrb	r3, [r3, #16]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	745a      	strb	r2, [r3, #17]
    }
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <reset_morse_word>:

void reset_morse_word(MorseContext* ctx) {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    ctx->morse_word_index = 0;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	741a      	strb	r2, [r3, #16]
    ctx->morse_word[0] = '\0';
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	745a      	strb	r2, [r3, #17]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <send_uart_char>:
const char* get_morse_word(const MorseContext* ctx) {
    return ctx->morse_word;
}

/*************************** UART Output ***************************/
void send_uart_char(char symbol) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, (uint8_t*)&symbol, sizeof(symbol), HAL_MAX_DELAY);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2201      	movs	r2, #1
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <send_uart_char+0x28>)
 800076c:	f003 f802 	bl	8003774 <HAL_UART_Transmit>
    HAL_Delay(5);
 8000770:	2005      	movs	r0, #5
 8000772:	f001 fbf9 	bl	8001f68 <HAL_Delay>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000220 	.word	0x20000220

08000784 <convert_to_morse>:
    HAL_UART_Transmit(&huart2, (uint8_t*)sentence, strlen(sentence), HAL_MAX_DELAY);
    HAL_Delay(5);
}

/*************************** Conversione Morse <-> Lettere ***************************/
void convert_to_morse(const char *message, char *output) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
    output[0] = '\0';
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < strlen(message); i++) {
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e048      	b.n	800082c <convert_to_morse+0xa8>
        char c = message[i];
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	73fb      	strb	r3, [r7, #15]
        int index;

        if (c == ' ') {
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b20      	cmp	r3, #32
 80007a8:	d10a      	bne.n	80007c0 <convert_to_morse+0x3c>
            strcat(output, " / ");
 80007aa:	6838      	ldr	r0, [r7, #0]
 80007ac:	f7ff fd22 	bl	80001f4 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <convert_to_morse+0xc0>)
 80007ba:	6810      	ldr	r0, [r2, #0]
 80007bc:	6018      	str	r0, [r3, #0]
            continue;
 80007be:	e032      	b.n	8000826 <convert_to_morse+0xa2>
        }
        if (c >= 'A' && c <= 'Z') index = c - 'A';
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b40      	cmp	r3, #64	@ 0x40
 80007c4:	d906      	bls.n	80007d4 <convert_to_morse+0x50>
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b5a      	cmp	r3, #90	@ 0x5a
 80007ca:	d803      	bhi.n	80007d4 <convert_to_morse+0x50>
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	3b41      	subs	r3, #65	@ 0x41
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	e012      	b.n	80007fa <convert_to_morse+0x76>
        else if (c >= 'a' && c <= 'z') index = c - 'a';
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b60      	cmp	r3, #96	@ 0x60
 80007d8:	d906      	bls.n	80007e8 <convert_to_morse+0x64>
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b7a      	cmp	r3, #122	@ 0x7a
 80007de:	d803      	bhi.n	80007e8 <convert_to_morse+0x64>
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	3b61      	subs	r3, #97	@ 0x61
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	e008      	b.n	80007fa <convert_to_morse+0x76>
        else if (c >= '0' && c <= '9') index = c - '0' + 26;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80007ec:	d91a      	bls.n	8000824 <convert_to_morse+0xa0>
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b39      	cmp	r3, #57	@ 0x39
 80007f2:	d817      	bhi.n	8000824 <convert_to_morse+0xa0>
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	3b16      	subs	r3, #22
 80007f8:	613b      	str	r3, [r7, #16]
        else continue;

        strcat(output, morse_table[index]);
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <convert_to_morse+0xc4>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	4619      	mov	r1, r3
 8000804:	6838      	ldr	r0, [r7, #0]
 8000806:	f003 fcb9 	bl	800417c <strcat>
        strcat(output, " ");
 800080a:	6838      	ldr	r0, [r7, #0]
 800080c:	f7ff fcf2 	bl	80001f4 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4413      	add	r3, r2
 8000818:	490c      	ldr	r1, [pc, #48]	@ (800084c <convert_to_morse+0xc8>)
 800081a:	461a      	mov	r2, r3
 800081c:	460b      	mov	r3, r1
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	8013      	strh	r3, [r2, #0]
 8000822:	e000      	b.n	8000826 <convert_to_morse+0xa2>
        else continue;
 8000824:	bf00      	nop
    for (int i = 0; i < strlen(message); i++) {
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fce1 	bl	80001f4 <strlen>
 8000832:	4602      	mov	r2, r0
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8af      	bhi.n	800079a <convert_to_morse+0x16>
    }
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08004ce8 	.word	0x08004ce8
 8000848:	20000010 	.word	0x20000010
 800084c:	08004cec 	.word	0x08004cec

08000850 <convert_from_morse>:

char convert_from_morse(const char* morse_code) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 36; i++) {
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e01a      	b.n	8000894 <convert_from_morse+0x44>
        if (strcmp(morse_code, morse_table[i]) == 0) {
 800085e:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <convert_from_morse+0x54>)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fcb9 	bl	80001e0 <strcmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10c      	bne.n	800088e <convert_from_morse+0x3e>
            return (i < 26) ? ('A' + i) : ('0' + (i - 26));
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b19      	cmp	r3, #25
 8000878:	dc04      	bgt.n	8000884 <convert_from_morse+0x34>
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3341      	adds	r3, #65	@ 0x41
 8000880:	b2db      	uxtb	r3, r3
 8000882:	e00b      	b.n	800089c <convert_from_morse+0x4c>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3316      	adds	r3, #22
 800088a:	b2db      	uxtb	r3, r3
 800088c:	e006      	b.n	800089c <convert_from_morse+0x4c>
    for (int i = 0; i < 36; i++) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b23      	cmp	r3, #35	@ 0x23
 8000898:	dde1      	ble.n	800085e <convert_from_morse+0xe>
        }
    }
    return '?';
 800089a:	233f      	movs	r3, #63	@ 0x3f
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000010 	.word	0x20000010

080008a8 <decode_morse_sentence>:

void decode_morse_sentence(const char* morse_sentence, char* output) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    output[0] = '\0';
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
    char buffer[10];
    int buf_index = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]

    for (int i = 0; morse_sentence[i] != '\0'; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	e051      	b.n	8000966 <decode_morse_sentence+0xbe>
        if (morse_sentence[i] == '.' || morse_sentence[i] == '-') {
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80008cc:	d005      	beq.n	80008da <decode_morse_sentence+0x32>
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80008d8:	d111      	bne.n	80008fe <decode_morse_sentence+0x56>
            buffer[buf_index++] = morse_sentence[i];
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	441a      	add	r2, r3
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	1c59      	adds	r1, r3, #1
 80008e4:	61f9      	str	r1, [r7, #28]
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	3320      	adds	r3, #32
 80008ea:	443b      	add	r3, r7
 80008ec:	f803 2c14 	strb.w	r2, [r3, #-20]
            buffer[buf_index] = '\0';
 80008f0:	f107 020c 	add.w	r2, r7, #12
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	4413      	add	r3, r2
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e030      	b.n	8000960 <decode_morse_sentence+0xb8>
        }
        else if (morse_sentence[i] == ' ' || morse_sentence[i] == '/') {
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b20      	cmp	r3, #32
 8000908:	d005      	beq.n	8000916 <decode_morse_sentence+0x6e>
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b2f      	cmp	r3, #47	@ 0x2f
 8000914:	d124      	bne.n	8000960 <decode_morse_sentence+0xb8>
            if (buf_index > 0) {
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	2b00      	cmp	r3, #0
 800091a:	dd0f      	ble.n	800093c <decode_morse_sentence+0x94>
                char c = convert_from_morse(buffer);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff95 	bl	8000850 <convert_from_morse>
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
                strncat(output, &c, 1);
 800092a:	f107 030b 	add.w	r3, r7, #11
 800092e:	2201      	movs	r2, #1
 8000930:	4619      	mov	r1, r3
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f003 fc31 	bl	800419a <strncat>
                buf_index = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
            }
            if (morse_sentence[i] == '/') strcat(output, " ");
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b2f      	cmp	r3, #47	@ 0x2f
 8000946:	d10b      	bne.n	8000960 <decode_morse_sentence+0xb8>
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f7ff fc53 	bl	80001f4 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	4413      	add	r3, r2
 8000956:	4911      	ldr	r1, [pc, #68]	@ (800099c <decode_morse_sentence+0xf4>)
 8000958:	461a      	mov	r2, r3
 800095a:	460b      	mov	r3, r1
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	8013      	strh	r3, [r2, #0]
    for (int i = 0; morse_sentence[i] != '\0'; i++) {
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3301      	adds	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1a7      	bne.n	80008c2 <decode_morse_sentence+0x1a>
        }
    }
    if (buf_index > 0) {
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	2b00      	cmp	r3, #0
 8000976:	dd0d      	ble.n	8000994 <decode_morse_sentence+0xec>
        char c = convert_from_morse(buffer);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff67 	bl	8000850 <convert_from_morse>
 8000982:	4603      	mov	r3, r0
 8000984:	72bb      	strb	r3, [r7, #10]
        strncat(output, &c, 1);
 8000986:	f107 030a 	add.w	r3, r7, #10
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	6838      	ldr	r0, [r7, #0]
 8000990:	f003 fc03 	bl	800419a <strncat>
    }
}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08004cec 	.word	0x08004cec

080009a0 <gestisci_inizio_pressione>:

/*************************** I/O Pulsante ***************************/
void gestisci_inizio_pressione(MorseContext* ctx, uint32_t now) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && ctx->button_was_pressed == 0) {
 80009aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <gestisci_inizio_pressione+0x40>)
 80009b0:	f001 fd68 	bl	8002484 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10e      	bne.n	80009d8 <gestisci_inizio_pressione+0x38>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <gestisci_inizio_pressione+0x38>
        ctx->t_start = now;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	601a      	str	r2, [r3, #0]
        HAL_Delay(5);
 80009ca:	2005      	movs	r0, #5
 80009cc:	f001 facc 	bl	8001f68 <HAL_Delay>
        ctx->button_was_pressed = 1;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    }
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020800 	.word	0x40020800

080009e4 <gestisci_fine_pressione>:

void gestisci_fine_pressione(MorseContext* ctx, uint32_t now) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && ctx->button_was_pressed == 1) {
 80009ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f2:	481f      	ldr	r0, [pc, #124]	@ (8000a70 <gestisci_fine_pressione+0x8c>)
 80009f4:	f001 fd46 	bl	8002484 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d133      	bne.n	8000a66 <gestisci_fine_pressione+0x82>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d12e      	bne.n	8000a66 <gestisci_fine_pressione+0x82>
        ctx->t_end = now;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
        HAL_Delay(5);
 8000a0e:	2005      	movs	r0, #5
 8000a10:	f001 faaa 	bl	8001f68 <HAL_Delay>
        ctx->button_was_pressed = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

        uint32_t duration = ctx->t_end - ctx->t_start;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	60fb      	str	r3, [r7, #12]
//        uint32_t dash_threshold = 3 * ctx->dot_duration;

        if (duration <= dot_duration) {
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <gestisci_fine_pressione+0x90>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d807      	bhi.n	8000a42 <gestisci_fine_pressione+0x5e>
            send_uart_char('.');
 8000a32:	202e      	movs	r0, #46	@ 0x2e
 8000a34:	f7ff fe90 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, '.');
 8000a38:	212e      	movs	r1, #46	@ 0x2e
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fe5a 	bl	80006f4 <add_morse_symbol>
 8000a40:	e006      	b.n	8000a50 <gestisci_fine_pressione+0x6c>
        } else {
            send_uart_char('-');
 8000a42:	202d      	movs	r0, #45	@ 0x2d
 8000a44:	f7ff fe88 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, '-');
 8000a48:	212d      	movs	r1, #45	@ 0x2d
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe52 	bl	80006f4 <add_morse_symbol>
        }

        ctx->last_release_time = now;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	609a      	str	r2, [r3, #8]
        ctx->space_sent = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        ctx->slash_sent = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
    }
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020800 	.word	0x40020800
 8000a74:	20000000 	.word	0x20000000

08000a78 <gestisci_fine_pressione_debug>:

void gestisci_fine_pressione_debug(MorseContext* ctx, uint32_t now) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && ctx->button_was_pressed == 1) {
 8000a82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a86:	4829      	ldr	r0, [pc, #164]	@ (8000b2c <gestisci_fine_pressione_debug+0xb4>)
 8000a88:	f001 fcfc 	bl	8002484 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d148      	bne.n	8000b24 <gestisci_fine_pressione_debug+0xac>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d143      	bne.n	8000b24 <gestisci_fine_pressione_debug+0xac>
        ctx->t_end = now;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
        HAL_Delay(5);
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f001 fa60 	bl	8001f68 <HAL_Delay>
        ctx->button_was_pressed = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

        uint32_t duration = ctx->t_end - ctx->t_start;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char buffer[32];
        sprintf(buffer, "[%lu ms] ", duration);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ac2:	491b      	ldr	r1, [pc, #108]	@ (8000b30 <gestisci_fine_pressione_debug+0xb8>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fb2f 	bl	8004128 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb90 	bl	80001f4 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f107 010c 	add.w	r1, r7, #12
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	4814      	ldr	r0, [pc, #80]	@ (8000b34 <gestisci_fine_pressione_debug+0xbc>)
 8000ae2:	f002 fe47 	bl	8003774 <HAL_UART_Transmit>

        if (duration <= dot_duration) {
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <gestisci_fine_pressione_debug+0xc0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d807      	bhi.n	8000b00 <gestisci_fine_pressione_debug+0x88>
            send_uart_char('.');
 8000af0:	202e      	movs	r0, #46	@ 0x2e
 8000af2:	f7ff fe31 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, '.');
 8000af6:	212e      	movs	r1, #46	@ 0x2e
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fdfb 	bl	80006f4 <add_morse_symbol>
 8000afe:	e006      	b.n	8000b0e <gestisci_fine_pressione_debug+0x96>
        } else {
            send_uart_char('-');
 8000b00:	202d      	movs	r0, #45	@ 0x2d
 8000b02:	f7ff fe29 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, '-');
 8000b06:	212d      	movs	r1, #45	@ 0x2d
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fdf3 	bl	80006f4 <add_morse_symbol>
        }

        ctx->last_release_time = now;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	609a      	str	r2, [r3, #8]
        ctx->space_sent = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        ctx->slash_sent = 0;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
    }
}
 8000b24:	bf00      	nop
 8000b26:	3730      	adds	r7, #48	@ 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	08004cf0 	.word	0x08004cf0
 8000b34:	20000220 	.word	0x20000220
 8000b38:	20000000 	.word	0x20000000

08000b3c <gestisci_spaziatura>:

void gestisci_spaziatura(MorseContext* ctx, uint32_t now) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
    if (!ctx->button_was_pressed && (now - ctx->last_release_time > letter_gap)) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d133      	bne.n	8000bb8 <gestisci_spaziatura+0x7c>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <gestisci_spaziatura+0x84>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d92b      	bls.n	8000bb8 <gestisci_spaziatura+0x7c>
        if ((now - ctx->last_release_time > word_gap) && !ctx->slash_sent) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	1ad2      	subs	r2, r2, r3
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <gestisci_spaziatura+0x88>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d913      	bls.n	8000b98 <gestisci_spaziatura+0x5c>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10e      	bne.n	8000b98 <gestisci_spaziatura+0x5c>
            send_uart_char('/');
 8000b7a:	202f      	movs	r0, #47	@ 0x2f
 8000b7c:	f7ff fdec 	bl	8000758 <send_uart_char>
            send_uart_char(' ');
 8000b80:	2020      	movs	r0, #32
 8000b82:	f7ff fde9 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, '/');
 8000b86:	212f      	movs	r1, #47	@ 0x2f
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fdb3 	bl	80006f4 <add_morse_symbol>
            ctx->slash_sent = 1;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2201      	movs	r2, #1
 8000b92:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
            send_uart_char(' ');
            add_morse_symbol(ctx, ' ');
            ctx->space_sent = 1;
        }
    }
}
 8000b96:	e00f      	b.n	8000bb8 <gestisci_spaziatura+0x7c>
        } else if (!ctx->space_sent) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10a      	bne.n	8000bb8 <gestisci_spaziatura+0x7c>
            send_uart_char(' ');
 8000ba2:	2020      	movs	r0, #32
 8000ba4:	f7ff fdd8 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, ' ');
 8000ba8:	2120      	movs	r1, #32
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fda2 	bl	80006f4 <add_morse_symbol>
            ctx->space_sent = 1;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	2000000c 	.word	0x2000000c

08000bc8 <gestisci_spaziatura_debug>:

void gestisci_spaziatura_debug(MorseContext* ctx, uint32_t now) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
    if (ctx->last_release_time == 0) return;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d065      	beq.n	8000ca6 <gestisci_spaziatura_debug+0xde>

    if (!ctx->button_was_pressed && (now - ctx->last_release_time > letter_gap)) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d161      	bne.n	8000ca8 <gestisci_spaziatura_debug+0xe0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <gestisci_spaziatura_debug+0xe8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d959      	bls.n	8000ca8 <gestisci_spaziatura_debug+0xe0>
        uint32_t gap_duration = now - ctx->last_release_time;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((gap_duration > word_gap) && !ctx->slash_sent) {
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <gestisci_spaziatura_debug+0xec>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d928      	bls.n	8000c5a <gestisci_spaziatura_debug+0x92>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d123      	bne.n	8000c5a <gestisci_spaziatura_debug+0x92>
            char buffer[32];
            sprintf(buffer, "[%lu ms] ", gap_duration);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c18:	4927      	ldr	r1, [pc, #156]	@ (8000cb8 <gestisci_spaziatura_debug+0xf0>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fa84 	bl	8004128 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fae5 	bl	80001f4 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 010c 	add.w	r1, r7, #12
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	4821      	ldr	r0, [pc, #132]	@ (8000cbc <gestisci_spaziatura_debug+0xf4>)
 8000c38:	f002 fd9c 	bl	8003774 <HAL_UART_Transmit>

            send_uart_char('/');
 8000c3c:	202f      	movs	r0, #47	@ 0x2f
 8000c3e:	f7ff fd8b 	bl	8000758 <send_uart_char>
            send_uart_char(' ');
 8000c42:	2020      	movs	r0, #32
 8000c44:	f7ff fd88 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, '/');
 8000c48:	212f      	movs	r1, #47	@ 0x2f
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fd52 	bl	80006f4 <add_morse_symbol>
            ctx->slash_sent = 1;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
        if ((gap_duration > word_gap) && !ctx->slash_sent) {
 8000c58:	e026      	b.n	8000ca8 <gestisci_spaziatura_debug+0xe0>
        } else if (!ctx->space_sent) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d121      	bne.n	8000ca8 <gestisci_spaziatura_debug+0xe0>
            char buffer[32];
            sprintf(buffer, "[%lu ms] ", gap_duration);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c6a:	4913      	ldr	r1, [pc, #76]	@ (8000cb8 <gestisci_spaziatura_debug+0xf0>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fa5b 	bl	8004128 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fabc 	bl	80001f4 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f107 010c 	add.w	r1, r7, #12
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <gestisci_spaziatura_debug+0xf4>)
 8000c8a:	f002 fd73 	bl	8003774 <HAL_UART_Transmit>

            send_uart_char(' ');
 8000c8e:	2020      	movs	r0, #32
 8000c90:	f7ff fd62 	bl	8000758 <send_uart_char>
            add_morse_symbol(ctx, ' ');
 8000c94:	2120      	movs	r1, #32
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fd2c 	bl	80006f4 <add_morse_symbol>
            ctx->space_sent = 1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 8000ca4:	e000      	b.n	8000ca8 <gestisci_spaziatura_debug+0xe0>
    if (ctx->last_release_time == 0) return;
 8000ca6:	bf00      	nop
        }
    }
}
 8000ca8:	3730      	adds	r7, #48	@ 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	08004cf0 	.word	0x08004cf0
 8000cbc:	20000220 	.word	0x20000220

08000cc0 <invia_parola>:

void invia_parola(MorseContext* ctx, uint32_t now) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b092      	sub	sp, #72	@ 0x48
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    if ((now - ctx->last_release_time > 3 * word_gap) && ctx->morse_word_index > 0) {
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	1ad1      	subs	r1, r2, r3
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <invia_parola+0xcc>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d950      	bls.n	8000d82 <invia_parola+0xc2>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7c1b      	ldrb	r3, [r3, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d04c      	beq.n	8000d82 <invia_parola+0xc2>
        send_uart_char('\n');
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f7ff fd35 	bl	8000758 <send_uart_char>
        send_uart_char('\r');
 8000cee:	200d      	movs	r0, #13
 8000cf0:	f7ff fd32 	bl	8000758 <send_uart_char>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Word in Morse_code: ", 20, HAL_MAX_DELAY);
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	2214      	movs	r2, #20
 8000cfa:	4925      	ldr	r1, [pc, #148]	@ (8000d90 <invia_parola+0xd0>)
 8000cfc:	4825      	ldr	r0, [pc, #148]	@ (8000d94 <invia_parola+0xd4>)
 8000cfe:	f002 fd39 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)ctx->morse_word, ctx->morse_word_index, HAL_MAX_DELAY);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f103 0111 	add.w	r1, r3, #17
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7c1b      	ldrb	r3, [r3, #16]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	4820      	ldr	r0, [pc, #128]	@ (8000d94 <invia_parola+0xd4>)
 8000d14:	f002 fd2e 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	491e      	ldr	r1, [pc, #120]	@ (8000d98 <invia_parola+0xd8>)
 8000d20:	481c      	ldr	r0, [pc, #112]	@ (8000d94 <invia_parola+0xd4>)
 8000d22:	f002 fd27 	bl	8003774 <HAL_UART_Transmit>

        char tradotta[64];
        decode_morse_sentence(ctx->morse_word, tradotta);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3311      	adds	r3, #17
 8000d2a:	f107 0208 	add.w	r2, r7, #8
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fdb9 	bl	80008a8 <decode_morse_sentence>

        HAL_UART_Transmit(&huart2, (uint8_t*)"Translated in letter: ", 22, HAL_MAX_DELAY);
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	2216      	movs	r2, #22
 8000d3c:	4917      	ldr	r1, [pc, #92]	@ (8000d9c <invia_parola+0xdc>)
 8000d3e:	4815      	ldr	r0, [pc, #84]	@ (8000d94 <invia_parola+0xd4>)
 8000d40:	f002 fd18 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)tradotta, strlen(tradotta), HAL_MAX_DELAY);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fa53 	bl	80001f4 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0108 	add.w	r1, r7, #8
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	480e      	ldr	r0, [pc, #56]	@ (8000d94 <invia_parola+0xd4>)
 8000d5c:	f002 fd0a 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2202      	movs	r2, #2
 8000d66:	490c      	ldr	r1, [pc, #48]	@ (8000d98 <invia_parola+0xd8>)
 8000d68:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <invia_parola+0xd4>)
 8000d6a:	f002 fd03 	bl	8003774 <HAL_UART_Transmit>

        lcd_clear();
 8000d6e:	f000 fbd9 	bl	8001524 <lcd_clear>
        lcd_send_string(tradotta);
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fb7a 	bl	8001470 <lcd_send_string>
        reset_morse_word(ctx);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fcdb 	bl	8000738 <reset_morse_word>
    }
}
 8000d82:	bf00      	nop
 8000d84:	3748      	adds	r7, #72	@ 0x48
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	08004cfc 	.word	0x08004cfc
 8000d94:	20000220 	.word	0x20000220
 8000d98:	08004d14 	.word	0x08004d14
 8000d9c:	08004d18 	.word	0x08004d18

08000da0 <invia_parola_debug>:

void invia_parola_debug(MorseContext* ctx, uint32_t now) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
    if ((now - ctx->last_release_time > 3 * word_gap) && ctx->morse_word_index > 0) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	1ad1      	subs	r1, r2, r3
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <invia_parola_debug+0x6c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d921      	bls.n	8000e04 <invia_parola_debug+0x64>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c1b      	ldrb	r3, [r3, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d01d      	beq.n	8000e04 <invia_parola_debug+0x64>
        uint32_t gap_duration = now - ctx->last_release_time;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char buffer[32];
        sprintf(buffer, "[Gap: %lu ms]\r\n", gap_duration);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dd8:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <invia_parola_debug+0x70>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 f9a4 	bl	8004128 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fa05 	bl	80001f4 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f107 010c 	add.w	r1, r7, #12
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <invia_parola_debug+0x74>)
 8000df8:	f002 fcbc 	bl	8003774 <HAL_UART_Transmit>

        invia_parola(ctx, now);  // riusa la funzione standard per evitare duplicazione
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff5e 	bl	8000cc0 <invia_parola>
    }
}
 8000e04:	bf00      	nop
 8000e06:	3730      	adds	r7, #48	@ 0x30
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	08004d30 	.word	0x08004d30
 8000e14:	20000220 	.word	0x20000220

08000e18 <ricevi_comando_uart>:

bool ricevi_comando_uart(char *buffer) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
    char c;
    while (1) {
        HAL_UART_Receive(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8000e24:	f107 010f 	add.w	r1, r7, #15
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4820      	ldr	r0, [pc, #128]	@ (8000eb0 <ricevi_comando_uart+0x98>)
 8000e30:	f002 fd2b 	bl	800388a <HAL_UART_Receive>
        if (c == 27 || c == 127) {
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b1b      	cmp	r3, #27
 8000e38:	d002      	beq.n	8000e40 <ricevi_comando_uart+0x28>
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e3e:	d104      	bne.n	8000e4a <ricevi_comando_uart+0x32>
            buffer[0] = '\0';
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
            return true; //case pressed esc or del to implement a check and go back in a switch_case
 8000e46:	2301      	movs	r3, #1
 8000e48:	e02e      	b.n	8000ea8 <ricevi_comando_uart+0x90>
        }
        if (c == '\r' || c == '\n') {
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b0d      	cmp	r3, #13
 8000e4e:	d002      	beq.n	8000e56 <ricevi_comando_uart+0x3e>
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d114      	bne.n	8000e80 <ricevi_comando_uart+0x68>
            buffer[i] = '\0';
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
            break;
 8000e60:	bf00      	nop
        } else {
            if (i < 31) buffer[i++] = c;
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
    }
    const char* crlf = "\r\n";
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <ricevi_comando_uart+0x9c>)
 8000e64:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, (uint8_t*)crlf, strlen(crlf), HAL_MAX_DELAY);
 8000e66:	6938      	ldr	r0, [r7, #16]
 8000e68:	f7ff f9c4 	bl	80001f4 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	6939      	ldr	r1, [r7, #16]
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <ricevi_comando_uart+0x98>)
 8000e78:	f002 fc7c 	bl	8003774 <HAL_UART_Transmit>
    return false;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e013      	b.n	8000ea8 <ricevi_comando_uart+0x90>
            if (i < 31) buffer[i++] = c;
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b1e      	cmp	r3, #30
 8000e84:	d807      	bhi.n	8000e96 <ricevi_comando_uart+0x7e>
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	75fa      	strb	r2, [r7, #23]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8000e96:	f107 010f 	add.w	r1, r7, #15
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <ricevi_comando_uart+0x98>)
 8000ea2:	f002 fc67 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Receive(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8000ea6:	e7bd      	b.n	8000e24 <ricevi_comando_uart+0xc>
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000220 	.word	0x20000220
 8000eb4:	08004d40 	.word	0x08004d40

08000eb8 <esegui_traduzione_morse>:

void esegui_traduzione_morse(uint8_t use_led, uint8_t use_buzzer, uint8_t use_uart) {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b0cd      	sub	sp, #308	@ 0x134
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ec8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8000ecc:	4622      	mov	r2, r4
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ed4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8000ed8:	4602      	mov	r2, r0
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ee0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
    char comando[32];
    char morse_output[256];

    const char* prompt = "Enter a word to translate into Morse:\r\n";
 8000ee8:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <esegui_traduzione_morse+0x110>)
 8000eea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_UART_Transmit(&huart2, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 8000eee:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8000ef2:	f7ff f97f 	bl	80001f4 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000f02:	4832      	ldr	r0, [pc, #200]	@ (8000fcc <esegui_traduzione_morse+0x114>)
 8000f04:	f002 fc36 	bl	8003774 <HAL_UART_Transmit>

    ricevi_comando_uart(comando);
 8000f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff83 	bl	8000e18 <ricevi_comando_uart>
    convert_to_morse(comando, morse_output);
 8000f12:	f107 0208 	add.w	r2, r7, #8
 8000f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fc31 	bl	8000784 <convert_to_morse>

    lcd_clear();
 8000f22:	f000 faff 	bl	8001524 <lcd_clear>
    lcd_send_string(morse_output);
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 faa0 	bl	8001470 <lcd_send_string>

    if (use_uart) {
 8000f30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f34:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d024      	beq.n	8000f88 <esegui_traduzione_morse+0xd0>
        const char* prefix = "Will send at rhythm:\r\n";
 8000f3e:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <esegui_traduzione_morse+0x118>)
 8000f40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        HAL_UART_Transmit(&huart2, (uint8_t*)prefix, strlen(prefix), HAL_MAX_DELAY);
 8000f44:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8000f48:	f7ff f954 	bl	80001f4 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8000f58:	481c      	ldr	r0, [pc, #112]	@ (8000fcc <esegui_traduzione_morse+0x114>)
 8000f5a:	f002 fc0b 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)morse_output, strlen(morse_output), HAL_MAX_DELAY);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f946 	bl	80001f4 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f107 0108 	add.w	r1, r7, #8
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	4815      	ldr	r0, [pc, #84]	@ (8000fcc <esegui_traduzione_morse+0x114>)
 8000f76:	f002 fbfd 	bl	8003774 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4914      	ldr	r1, [pc, #80]	@ (8000fd4 <esegui_traduzione_morse+0x11c>)
 8000f82:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <esegui_traduzione_morse+0x114>)
 8000f84:	f002 fbf6 	bl	8003774 <HAL_UART_Transmit>
    }

    play_morse_code(morse_output, use_led, use_buzzer, use_uart);
 8000f88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f8c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8000f90:	781c      	ldrb	r4, [r3, #0]
 8000f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f96:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fa0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8000fa4:	7819      	ldrb	r1, [r3, #0]
 8000fa6:	f107 0008 	add.w	r0, r7, #8
 8000faa:	4623      	mov	r3, r4
 8000fac:	f000 f814 	bl	8000fd8 <play_morse_code>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <esegui_traduzione_morse+0x11c>)
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <esegui_traduzione_morse+0x114>)
 8000fba:	f002 fbdb 	bl	8003774 <HAL_UART_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	08004d44 	.word	0x08004d44
 8000fcc:	20000220 	.word	0x20000220
 8000fd0:	08004d6c 	.word	0x08004d6c
 8000fd4:	08004d40 	.word	0x08004d40

08000fd8 <play_morse_code>:

void play_morse_code(const char *morse_output, uint8_t use_led, uint8_t use_buzzer, uint8_t use_uart) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	70fb      	strb	r3, [r7, #3]
 8000fea:	460b      	mov	r3, r1
 8000fec:	70bb      	strb	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	707b      	strb	r3, [r7, #1]
    for (int i = 0; i < strlen(morse_output); i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e090      	b.n	800111a <play_morse_code+0x142>
        char c = morse_output[i];
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	727b      	strb	r3, [r7, #9]
        lcd_scroll_auto_tick((char*)morse_output);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f9cc 	bl	80013a0 <lcd_scroll_auto_tick>
        uint16_t pin_mask = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	817b      	strh	r3, [r7, #10]
        if (use_led) pin_mask |= GPIO_PIN_5;
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <play_morse_code+0x42>
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	817b      	strh	r3, [r7, #10]
        if (use_buzzer) pin_mask |= GPIO_PIN_6;
 800101a:	78bb      	ldrb	r3, [r7, #2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <play_morse_code+0x50>
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001026:	817b      	strh	r3, [r7, #10]

        if (c == '.') {
 8001028:	7a7b      	ldrb	r3, [r7, #9]
 800102a:	2b2e      	cmp	r3, #46	@ 0x2e
 800102c:	d120      	bne.n	8001070 <play_morse_code+0x98>
            if (use_uart) HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, 100);
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <play_morse_code+0x68>
 8001034:	2364      	movs	r3, #100	@ 0x64
 8001036:	2201      	movs	r2, #1
 8001038:	493e      	ldr	r1, [pc, #248]	@ (8001134 <play_morse_code+0x15c>)
 800103a:	483f      	ldr	r0, [pc, #252]	@ (8001138 <play_morse_code+0x160>)
 800103c:	f002 fb9a 	bl	8003774 <HAL_UART_Transmit>
            if (pin_mask) HAL_GPIO_WritePin(GPIOA, pin_mask, GPIO_PIN_SET);
 8001040:	897b      	ldrh	r3, [r7, #10]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <play_morse_code+0x7a>
 8001046:	897b      	ldrh	r3, [r7, #10]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	483b      	ldr	r0, [pc, #236]	@ (800113c <play_morse_code+0x164>)
 800104e:	f001 fa31 	bl	80024b4 <HAL_GPIO_WritePin>
            HAL_Delay(dot_duration);
 8001052:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <play_morse_code+0x168>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 ff86 	bl	8001f68 <HAL_Delay>
            if (pin_mask) HAL_GPIO_WritePin(GPIOA, pin_mask, GPIO_PIN_RESET);
 800105c:	897b      	ldrh	r3, [r7, #10]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d053      	beq.n	800110a <play_morse_code+0x132>
 8001062:	897b      	ldrh	r3, [r7, #10]
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4834      	ldr	r0, [pc, #208]	@ (800113c <play_morse_code+0x164>)
 800106a:	f001 fa23 	bl	80024b4 <HAL_GPIO_WritePin>
 800106e:	e04c      	b.n	800110a <play_morse_code+0x132>
        }
        else if (c == '-') {
 8001070:	7a7b      	ldrb	r3, [r7, #9]
 8001072:	2b2d      	cmp	r3, #45	@ 0x2d
 8001074:	d120      	bne.n	80010b8 <play_morse_code+0xe0>
            if (use_uart) HAL_UART_Transmit(&huart2, (uint8_t*)"-", 1, 100);
 8001076:	787b      	ldrb	r3, [r7, #1]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <play_morse_code+0xb0>
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	2201      	movs	r2, #1
 8001080:	4930      	ldr	r1, [pc, #192]	@ (8001144 <play_morse_code+0x16c>)
 8001082:	482d      	ldr	r0, [pc, #180]	@ (8001138 <play_morse_code+0x160>)
 8001084:	f002 fb76 	bl	8003774 <HAL_UART_Transmit>
            if (pin_mask) HAL_GPIO_WritePin(GPIOA, pin_mask, GPIO_PIN_SET);
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <play_morse_code+0xc2>
 800108e:	897b      	ldrh	r3, [r7, #10]
 8001090:	2201      	movs	r2, #1
 8001092:	4619      	mov	r1, r3
 8001094:	4829      	ldr	r0, [pc, #164]	@ (800113c <play_morse_code+0x164>)
 8001096:	f001 fa0d 	bl	80024b4 <HAL_GPIO_WritePin>
            HAL_Delay(dash_duration);
 800109a:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <play_morse_code+0x170>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 ff62 	bl	8001f68 <HAL_Delay>
            if (pin_mask) HAL_GPIO_WritePin(GPIOA, pin_mask, GPIO_PIN_RESET);
 80010a4:	897b      	ldrh	r3, [r7, #10]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d02f      	beq.n	800110a <play_morse_code+0x132>
 80010aa:	897b      	ldrh	r3, [r7, #10]
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4822      	ldr	r0, [pc, #136]	@ (800113c <play_morse_code+0x164>)
 80010b2:	f001 f9ff 	bl	80024b4 <HAL_GPIO_WritePin>
 80010b6:	e028      	b.n	800110a <play_morse_code+0x132>
        }
        else if (c == ' ') {
 80010b8:	7a7b      	ldrb	r3, [r7, #9]
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d111      	bne.n	80010e2 <play_morse_code+0x10a>
            if (use_uart) HAL_UART_Transmit(&huart2, (uint8_t*)" ", 1, 100);
 80010be:	787b      	ldrb	r3, [r7, #1]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <play_morse_code+0xf8>
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	4920      	ldr	r1, [pc, #128]	@ (800114c <play_morse_code+0x174>)
 80010ca:	481b      	ldr	r0, [pc, #108]	@ (8001138 <play_morse_code+0x160>)
 80010cc:	f002 fb52 	bl	8003774 <HAL_UART_Transmit>
            HAL_Delay(letter_gap - dot_duration);
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <play_morse_code+0x178>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <play_morse_code+0x168>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 ff44 	bl	8001f68 <HAL_Delay>
 80010e0:	e013      	b.n	800110a <play_morse_code+0x132>
        }
        else if (c == '/') {
 80010e2:	7a7b      	ldrb	r3, [r7, #9]
 80010e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80010e6:	d110      	bne.n	800110a <play_morse_code+0x132>
            if (use_uart) HAL_UART_Transmit(&huart2, (uint8_t*)" / ", 3, 100);
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <play_morse_code+0x122>
 80010ee:	2364      	movs	r3, #100	@ 0x64
 80010f0:	2203      	movs	r2, #3
 80010f2:	4918      	ldr	r1, [pc, #96]	@ (8001154 <play_morse_code+0x17c>)
 80010f4:	4810      	ldr	r0, [pc, #64]	@ (8001138 <play_morse_code+0x160>)
 80010f6:	f002 fb3d 	bl	8003774 <HAL_UART_Transmit>
            HAL_Delay(word_gap - dot_duration);
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <play_morse_code+0x180>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <play_morse_code+0x168>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f000 ff2f 	bl	8001f68 <HAL_Delay>
        }

        HAL_Delay(dot_duration);
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <play_morse_code+0x168>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ff2a 	bl	8001f68 <HAL_Delay>
    for (int i = 0; i < strlen(morse_output); i++) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f86a 	bl	80001f4 <strlen>
 8001120:	4602      	mov	r2, r0
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	f63f af67 	bhi.w	8000ff8 <play_morse_code+0x20>
    }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08004adc 	.word	0x08004adc
 8001138:	20000220 	.word	0x20000220
 800113c:	40020000 	.word	0x40020000
 8001140:	20000000 	.word	0x20000000
 8001144:	08004b30 	.word	0x08004b30
 8001148:	20000004 	.word	0x20000004
 800114c:	08004cec 	.word	0x08004cec
 8001150:	20000008 	.word	0x20000008
 8001154:	08004ce8 	.word	0x08004ce8
 8001158:	2000000c 	.word	0x2000000c

0800115c <lcd_send_cmd>:


#define LCD_COLS 16

void lcd_send_cmd (char cmd)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f023 030f 	bic.w	r3, r3, #15
 800116c:	74fb      	strb	r3, [r7, #19]
  data_l = ((cmd<<4)&0xf0);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	74bb      	strb	r3, [r7, #18]
  uint8_t data_t[4];
  data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	f043 030c 	orr.w	r3, r3, #12
 800117a:	b2db      	uxtb	r3, r3
 800117c:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 800117e:	7cfb      	ldrb	r3, [r7, #19]
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	b2db      	uxtb	r3, r3
 8001186:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	f043 030c 	orr.w	r3, r3, #12
 800118e:	b2db      	uxtb	r3, r3
 8001190:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8001192:	7cbb      	ldrb	r3, [r7, #18]
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	b2db      	uxtb	r3, r3
 800119a:	72fb      	strb	r3, [r7, #11]

  int retry = 3;
 800119c:	2303      	movs	r3, #3
 800119e:	617b      	str	r3, [r7, #20]
      HAL_StatusTypeDef ret;
      do {
          ret = HAL_I2C_Master_Transmit(s_lcd_i2c_handle, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <lcd_send_cmd+0x98>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f107 0208 	add.w	r2, r7, #8
 80011a8:	2364      	movs	r3, #100	@ 0x64
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2304      	movs	r3, #4
 80011ae:	214e      	movs	r1, #78	@ 0x4e
 80011b0:	f001 fade 	bl	8002770 <HAL_I2C_Master_Transmit>
 80011b4:	4603      	mov	r3, r0
 80011b6:	747b      	strb	r3, [r7, #17]
      } while (ret != HAL_OK && --retry > 0);
 80011b8:	7c7b      	ldrb	r3, [r7, #17]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <lcd_send_cmd+0x6e>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	dcea      	bgt.n	80011a0 <lcd_send_cmd+0x44>

      if (ret != HAL_OK) {
 80011ca:	7c7b      	ldrb	r3, [r7, #17]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00c      	beq.n	80011ea <lcd_send_cmd+0x8e>
          const char* err_msg = "LCD ERROR: I2C transmit failed (cmd)\r\n";
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <lcd_send_cmd+0x9c>)
 80011d2:	60fb      	str	r3, [r7, #12]
          HAL_UART_Transmit(&huart2, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff f80d 	bl	80001f4 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <lcd_send_cmd+0xa0>)
 80011e6:	f002 fac5 	bl	8003774 <HAL_UART_Transmit>
      }

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000190 	.word	0x20000190
 80011f8:	08004d84 	.word	0x08004d84
 80011fc:	20000220 	.word	0x20000220

08001200 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af02      	add	r7, sp, #8
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f023 030f 	bic.w	r3, r3, #15
 8001210:	74fb      	strb	r3, [r7, #19]
	data_l = ((data<<4)&0xf0);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	74bb      	strb	r3, [r7, #18]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8001218:	7cfb      	ldrb	r3, [r7, #19]
 800121a:	f043 030d 	orr.w	r3, r3, #13
 800121e:	b2db      	uxtb	r3, r3
 8001220:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8001222:	7cfb      	ldrb	r3, [r7, #19]
 8001224:	f043 0309 	orr.w	r3, r3, #9
 8001228:	b2db      	uxtb	r3, r3
 800122a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	f043 030d 	orr.w	r3, r3, #13
 8001232:	b2db      	uxtb	r3, r3
 8001234:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8001236:	7cbb      	ldrb	r3, [r7, #18]
 8001238:	f043 0309 	orr.w	r3, r3, #9
 800123c:	b2db      	uxtb	r3, r3
 800123e:	72fb      	strb	r3, [r7, #11]

	int retry = 3;
 8001240:	2303      	movs	r3, #3
 8001242:	617b      	str	r3, [r7, #20]
	    HAL_StatusTypeDef ret;
	    do {
	        ret = HAL_I2C_Master_Transmit(s_lcd_i2c_handle, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8001244:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <lcd_send_data+0xf4>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f107 0208 	add.w	r2, r7, #8
 800124c:	2364      	movs	r3, #100	@ 0x64
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2304      	movs	r3, #4
 8001252:	214e      	movs	r1, #78	@ 0x4e
 8001254:	f001 fa8c 	bl	8002770 <HAL_I2C_Master_Transmit>
 8001258:	4603      	mov	r3, r0
 800125a:	747b      	strb	r3, [r7, #17]
	        ////////////////////////////////////////////////
	        //per il debug in lcd_debug_print_shadow_hex
	        if (lcd_row < LCD_ROWS && lcd_col < LCD_COLS)
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <lcd_send_data+0xf8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	dc0d      	bgt.n	8001280 <lcd_send_data+0x80>
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <lcd_send_data+0xfc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	dc09      	bgt.n	8001280 <lcd_send_data+0x80>
	            lcd_shadow[lcd_row][lcd_col] = data;
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <lcd_send_data+0xf8>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <lcd_send_data+0xfc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4922      	ldr	r1, [pc, #136]	@ (8001300 <lcd_send_data+0x100>)
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	440a      	add	r2, r1
 800127a:	4413      	add	r3, r2
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	701a      	strb	r2, [r3, #0]

	        lcd_col++;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <lcd_send_data+0xfc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <lcd_send_data+0xfc>)
 8001288:	6013      	str	r3, [r2, #0]
	        if (lcd_col >= LCD_COLS) {
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <lcd_send_data+0xfc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	dd0c      	ble.n	80012ac <lcd_send_data+0xac>
	            lcd_col = 0;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <lcd_send_data+0xfc>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
	            lcd_row = (lcd_row + 1) % LCD_ROWS;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <lcd_send_data+0xf8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	bfb8      	it	lt
 80012a6:	425b      	neglt	r3, r3
 80012a8:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <lcd_send_data+0xf8>)
 80012aa:	6013      	str	r3, [r2, #0]
	        }
	       ///////////////////////////////////////////////////
	    } while (ret != HAL_OK && --retry > 0);
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <lcd_send_data+0xbe>
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dcc2      	bgt.n	8001244 <lcd_send_data+0x44>



	    if (ret != HAL_OK) {
 80012be:	7c7b      	ldrb	r3, [r7, #17]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <lcd_send_data+0xec>
	    	if (failed == 0){
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <lcd_send_data+0x104>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10f      	bne.n	80012ec <lcd_send_data+0xec>

			const char* err_msg = 	"*************************************\n\r"
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <lcd_send_data+0x108>)
 80012ce:	60fb      	str	r3, [r7, #12]
									"LCD ERROR: I2C transmit failed (data)\r\n"
									"The message transmitted has an error\n\r"
									"*************************************\n\r";
			HAL_UART_Transmit(&huart2, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7fe ff8f 	bl	80001f4 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	480a      	ldr	r0, [pc, #40]	@ (800130c <lcd_send_data+0x10c>)
 80012e2:	f002 fa47 	bl	8003774 <HAL_UART_Transmit>
	        failed = 1;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <lcd_send_data+0x104>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
	    	}
	    }
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000190 	.word	0x20000190
 80012f8:	200001a4 	.word	0x200001a4
 80012fc:	200001a8 	.word	0x200001a8
 8001300:	200001ac 	.word	0x200001ac
 8001304:	200001a0 	.word	0x200001a0
 8001308:	08004dac 	.word	0x08004dac
 800130c:	20000220 	.word	0x20000220

08001310 <lcd_init>:


void lcd_init(I2C_HandleTypeDef *hi2c) // Takes handle from user
  {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
      s_lcd_i2c_handle = hi2c; // Store the handle in our private variable
 8001318:	4a20      	ldr	r2, [pc, #128]	@ (800139c <lcd_init+0x8c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]

      // Now, perform LCD hardware initialization using the stored handle
      if (s_lcd_i2c_handle != NULL)
 800131e:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <lcd_init+0x8c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d035      	beq.n	8001392 <lcd_init+0x82>
      {
          // Send initialization commands (example sequence)
          HAL_Delay(50); 		// Wait after power on
 8001326:	2032      	movs	r0, #50	@ 0x32
 8001328:	f000 fe1e 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x30); 	// Function set based on datasheet needs...
 800132c:	2030      	movs	r0, #48	@ 0x30
 800132e:	f7ff ff15 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 8001332:	2014      	movs	r0, #20
 8001334:	f000 fe18 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x30);
 8001338:	2030      	movs	r0, #48	@ 0x30
 800133a:	f7ff ff0f 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f000 fe12 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x30);
 8001344:	2030      	movs	r0, #48	@ 0x30
 8001346:	f7ff ff09 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 800134a:	2014      	movs	r0, #20
 800134c:	f000 fe0c 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x20); 	// Set 4-bit mode based on datasheet needs...
 8001350:	2020      	movs	r0, #32
 8001352:	f7ff ff03 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 8001356:	2014      	movs	r0, #20
 8001358:	f000 fe06 	bl	8001f68 <HAL_Delay>

          lcd_send_cmd(0x28); 	// Function Set: 4-bit, 2 lines, 5x8 font
 800135c:	2028      	movs	r0, #40	@ 0x28
 800135e:	f7ff fefd 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 8001362:	2014      	movs	r0, #20
 8001364:	f000 fe00 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x08); 	// Display Off
 8001368:	2008      	movs	r0, #8
 800136a:	f7ff fef7 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 800136e:	2014      	movs	r0, #20
 8001370:	f000 fdfa 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x01); 	// Clear Display
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fef1 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20); 		// Clear takes longer
 800137a:	2014      	movs	r0, #20
 800137c:	f000 fdf4 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x06); 	// Entry Mode Set: Increment cursor, no shift
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff feeb 	bl	800115c <lcd_send_cmd>
          HAL_Delay(20);
 8001386:	2014      	movs	r0, #20
 8001388:	f000 fdee 	bl	8001f68 <HAL_Delay>
          lcd_send_cmd(0x0C); 	// Display On: Display on, cursor off, blink off
 800138c:	200c      	movs	r0, #12
 800138e:	f7ff fee5 	bl	800115c <lcd_send_cmd>
      }
      // else { Handle error - init called with NULL handle }
  }
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000190 	.word	0x20000190

080013a0 <lcd_scroll_auto_tick>:


void lcd_scroll_auto_tick(char *str)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    if (lcd_text != str) {
 80013a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <lcd_scroll_auto_tick+0xc4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d00c      	beq.n	80013cc <lcd_scroll_auto_tick+0x2c>
        lcd_text = str;
 80013b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001464 <lcd_scroll_auto_tick+0xc4>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6013      	str	r3, [r2, #0]
        lcd_index = 0;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
        last_lcd_tick = HAL_GetTick();
 80013be:	f000 fdc7 	bl	8001f50 <HAL_GetTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a29      	ldr	r2, [pc, #164]	@ (800146c <lcd_scroll_auto_tick+0xcc>)
 80013c6:	6013      	str	r3, [r2, #0]
        lcd_clear();
 80013c8:	f000 f8ac 	bl	8001524 <lcd_clear>
    }

    // Aggiorna ogni 1000 ms
    if (HAL_GetTick() - last_lcd_tick < 1000) return;
 80013cc:	f000 fdc0 	bl	8001f50 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <lcd_scroll_auto_tick+0xcc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013dc:	d33d      	bcc.n	800145a <lcd_scroll_auto_tick+0xba>

    int len = strlen(lcd_text);
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <lcd_scroll_auto_tick+0xc4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff06 	bl	80001f4 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60bb      	str	r3, [r7, #8]

    lcd_clear();
 80013ec:	f000 f89a 	bl	8001524 <lcd_clear>
    lcd_put_cur(0, 0);
 80013f0:	2100      	movs	r1, #0
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f86c 	bl	80014d0 <lcd_put_cur>
    for (int i = 0; i < 16 && (lcd_index + i) < len; i++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e00d      	b.n	800141a <lcd_scroll_auto_tick+0x7a>
        lcd_send_data(lcd_text[lcd_index + i]);
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <lcd_scroll_auto_tick+0xc4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 8001404:	6811      	ldr	r1, [r2, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	440a      	add	r2, r1
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fef6 	bl	8001200 <lcd_send_data>
    for (int i = 0; i < 16 && (lcd_index + i) < len; i++) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	dc06      	bgt.n	800142e <lcd_scroll_auto_tick+0x8e>
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	429a      	cmp	r2, r3
 800142c:	dce7      	bgt.n	80013fe <lcd_scroll_auto_tick+0x5e>
    }

    lcd_index += 16;
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3310      	adds	r3, #16
 8001434:	4a0c      	ldr	r2, [pc, #48]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 8001436:	6013      	str	r3, [r2, #0]
    if (lcd_index >= len) lcd_index = 0;
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	429a      	cmp	r2, r3
 8001440:	dc02      	bgt.n	8001448 <lcd_scroll_auto_tick+0xa8>
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <lcd_scroll_auto_tick+0xc8>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f000 fd8d 	bl	8001f68 <HAL_Delay>
    last_lcd_tick = HAL_GetTick();
 800144e:	f000 fd7f 	bl	8001f50 <HAL_GetTick>
 8001452:	4603      	mov	r3, r0
 8001454:	4a05      	ldr	r2, [pc, #20]	@ (800146c <lcd_scroll_auto_tick+0xcc>)
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e000      	b.n	800145c <lcd_scroll_auto_tick+0xbc>
    if (HAL_GetTick() - last_lcd_tick < 1000) return;
 800145a:	bf00      	nop
}
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000019c 	.word	0x2000019c
 8001468:	20000198 	.word	0x20000198
 800146c:	20000194 	.word	0x20000194

08001470 <lcd_send_string>:


void lcd_send_string (char *str)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    int col = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
    int row = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
    lcd_put_cur(row, col);  // Inizia da (0,0)
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 f824 	bl	80014d0 <lcd_put_cur>

    while (*str)
 8001488:	e018      	b.n	80014bc <lcd_send_string+0x4c>
    {
        lcd_send_data(*str++);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff feb4 	bl	8001200 <lcd_send_data>
        col++;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]

        if (col >= LCD_COLS)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	dd0b      	ble.n	80014bc <lcd_send_string+0x4c>
        {
            col = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
            row++;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
            if (row > 1) break;  // Solo 2 righe nel display 16x2
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	dc08      	bgt.n	80014c6 <lcd_send_string+0x56>
            lcd_put_cur(row, col);
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f000 f80a 	bl	80014d0 <lcd_put_cur>
    while (*str)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e2      	bne.n	800148a <lcd_send_string+0x1a>
        }
    }
}
 80014c4:	e000      	b.n	80014c8 <lcd_send_string+0x58>
            if (row > 1) break;  // Solo 2 righe nel display 16x2
 80014c6:	bf00      	nop
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	lcd_row = row;
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <lcd_put_cur+0x4c>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
	lcd_col = col;
 80014e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <lcd_put_cur+0x50>)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6013      	str	r3, [r2, #0]
    switch (row)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <lcd_put_cur+0x24>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <lcd_put_cur+0x2e>
 80014f2:	e009      	b.n	8001508 <lcd_put_cur+0x38>
    {
        case 0:
            col |= 0x80;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014fa:	603b      	str	r3, [r7, #0]
            break;
 80014fc:	e004      	b.n	8001508 <lcd_put_cur+0x38>
        case 1:
            col |= 0xC0;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001504:	603b      	str	r3, [r7, #0]
            break;
 8001506:	bf00      	nop
    }
    lcd_send_cmd (col);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe25 	bl	800115c <lcd_send_cmd>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001a4 	.word	0x200001a4
 8001520:	200001a8 	.word	0x200001a8

08001524 <lcd_clear>:
    }
  }
}

void lcd_clear (void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
lcd_send_cmd(0x01);
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff fe16 	bl	800115c <lcd_send_cmd>
   HAL_Delay(20);
 8001530:	2014      	movs	r0, #20
 8001532:	f000 fd19 	bl	8001f68 <HAL_Delay>


   // Azzera il buffer shadow
   for (int r = 0; r < LCD_ROWS; r++)
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	e013      	b.n	8001564 <lcd_clear+0x40>
       for (int c = 0; c < LCD_COLS; c++)
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	e00a      	b.n	8001558 <lcd_clear+0x34>
           lcd_shadow[r][c] = ' ';
 8001542:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <lcd_clear+0x5c>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	441a      	add	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4413      	add	r3, r2
 800154e:	2220      	movs	r2, #32
 8001550:	701a      	strb	r2, [r3, #0]
       for (int c = 0; c < LCD_COLS; c++)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	ddf1      	ble.n	8001542 <lcd_clear+0x1e>
   for (int r = 0; r < LCD_ROWS; r++)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	dde8      	ble.n	800153c <lcd_clear+0x18>

   lcd_row = 0;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <lcd_clear+0x60>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
   lcd_col = 0;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <lcd_clear+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200001ac 	.word	0x200001ac
 8001584:	200001a4 	.word	0x200001a4
 8001588:	200001a8 	.word	0x200001a8

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8001592:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f000 fc76 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f9ac 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 fa62 	bl	8001a64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015a0:	f000 fa08 	bl	80019b4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015a4:	f000 fa34 	bl	8001a10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  StatoPrincipale stato_principale = STATO_DURATION;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
  StatoMorse stato_corrente = STATO_MENU;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
  StatoM2L stato_M2L = STATO_SETTING_M2L;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215

  lcd_init(&hi2c1);
 80015ba:	48bf      	ldr	r0, [pc, #764]	@ (80018b8 <main+0x32c>)
 80015bc:	f7ff fea8 	bl	8001310 <lcd_init>
  morse_init(&morse_ctx);
 80015c0:	48be      	ldr	r0, [pc, #760]	@ (80018bc <main+0x330>)
 80015c2:	f7ff f881 	bl	80006c8 <morse_init>
  lcd_clear();
 80015c6:	f7ff ffad 	bl	8001524 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch (stato_principale) {
 80015ca:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d8fb      	bhi.n	80015ca <main+0x3e>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <main+0x4c>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	08001613 	.word	0x08001613
 80015e0:	0800169b 	.word	0x0800169b
 80015e4:	080017dd 	.word	0x080017dd
	case STATO_DURATION:
		const char* welcome_msg =
 80015e8:	4bb5      	ldr	r3, [pc, #724]	@ (80018c0 <main+0x334>)
 80015ea:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		    "- Choose the operating mode (input/output)\r\n"
		    "- Configure Morse signal speed (dot duration)\r\n"
		    "- Send letters or enter Morse using the button\r\n"
		    "\r\n";

		HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 80015ee:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80015f2:	f7fe fdff 	bl	80001f4 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8001602:	48b0      	ldr	r0, [pc, #704]	@ (80018c4 <main+0x338>)
 8001604:	f002 f8b6 	bl	8003774 <HAL_UART_Transmit>

		configura_dot_duration();
 8001608:	f7fe ffe8 	bl	80005dc <configura_dot_duration>

		stato_principale=STATO_SETTINGS;
 800160c:	2301      	movs	r3, #1
 800160e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

	case STATO_SETTINGS:
			const char *prompt =
 8001612:	4bad      	ldr	r3, [pc, #692]	@ (80018c8 <main+0x33c>)
 8001614:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
				"Select operation mode:\n\r"
					"1 = Letters -> Morse\n\r"
					"2 = Morse -> Letters\n\r";


			HAL_UART_Transmit(&huart2, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 8001618:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 800161c:	f7fe fdea 	bl	80001f4 <strlen>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 800162c:	48a5      	ldr	r0, [pc, #660]	@ (80018c4 <main+0x338>)
 800162e:	f002 f8a1 	bl	8003774 <HAL_UART_Transmit>


			if (ricevi_comando_uart(comando)) {
 8001632:	48a6      	ldr	r0, [pc, #664]	@ (80018cc <main+0x340>)
 8001634:	f7ff fbf0 	bl	8000e18 <ricevi_comando_uart>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <main+0xba>
				stato_principale = STATO_SETTINGS;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				break;
 8001644:	e154      	b.n	80018f0 <main+0x364>
			}

			if (strcmp(comando, "1") == 0) {
 8001646:	49a2      	ldr	r1, [pc, #648]	@ (80018d0 <main+0x344>)
 8001648:	48a0      	ldr	r0, [pc, #640]	@ (80018cc <main+0x340>)
 800164a:	f7fe fdc9 	bl	80001e0 <strcmp>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d106      	bne.n	8001662 <main+0xd6>
				stato_principale = STATO_LETTERS_TO_MORSE;
 8001654:	2302      	movs	r3, #2
 8001656:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				stato_corrente = STATO_MENU;  // enter in section LED/BUZZER
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				stato_principale = STATO_MORSE_TO_LETTERS;
			} else {
				const char* msg = "Invalid Command\r\n";
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
			}
			break;//end case STATO_SETTINGS
 8001660:	e146      	b.n	80018f0 <main+0x364>
			} else if (strcmp(comando, "2") == 0) {
 8001662:	499c      	ldr	r1, [pc, #624]	@ (80018d4 <main+0x348>)
 8001664:	4899      	ldr	r0, [pc, #612]	@ (80018cc <main+0x340>)
 8001666:	f7fe fdbb 	bl	80001e0 <strcmp>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d103      	bne.n	8001678 <main+0xec>
				stato_principale = STATO_MORSE_TO_LETTERS;
 8001670:	2303      	movs	r3, #3
 8001672:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
			break;//end case STATO_SETTINGS
 8001676:	e13b      	b.n	80018f0 <main+0x364>
				const char* msg = "Invalid Command\r\n";
 8001678:	4b97      	ldr	r3, [pc, #604]	@ (80018d8 <main+0x34c>)
 800167a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800167e:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8001682:	f7fe fdb7 	bl	80001f4 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8001692:	488c      	ldr	r0, [pc, #560]	@ (80018c4 <main+0x338>)
 8001694:	f002 f86e 	bl	8003774 <HAL_UART_Transmit>
			break;//end case STATO_SETTINGS
 8001698:	e12a      	b.n	80018f0 <main+0x364>

/*************************OPERATION MODE LETTER 2 MORSE*****************************/
	case STATO_LETTERS_TO_MORSE:
		switch (stato_corrente) {
 800169a:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800169e:	2b04      	cmp	r3, #4
 80016a0:	f200 8105 	bhi.w	80018ae <main+0x322>
 80016a4:	a201      	add	r2, pc, #4	@ (adr r2, 80016ac <main+0x120>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	080016c1 	.word	0x080016c1
 80016b0:	08001755 	.word	0x08001755
 80016b4:	08001773 	.word	0x08001773
 80016b8:	08001791 	.word	0x08001791
 80016bc:	080017af 	.word	0x080017af
			case STATO_MENU:
				const char *menu =
 80016c0:	4b86      	ldr	r3, [pc, #536]	@ (80018dc <main+0x350>)
 80016c2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
					"1 = Only LED\n\r"
					"2 = Only Buzzer\n\r"
					"3 = LED + Buzzer\n\r"
					"4 = LED + UART\n\r";

				HAL_UART_Transmit(&huart2, (uint8_t*)menu, strlen(menu), HAL_MAX_DELAY);
 80016c6:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80016ca:	f7fe fd93 	bl	80001f4 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 80016da:	487a      	ldr	r0, [pc, #488]	@ (80018c4 <main+0x338>)
 80016dc:	f002 f84a 	bl	8003774 <HAL_UART_Transmit>


				if (ricevi_comando_uart(comando)) {
 80016e0:	487a      	ldr	r0, [pc, #488]	@ (80018cc <main+0x340>)
 80016e2:	f7ff fb99 	bl	8000e18 <ricevi_comando_uart>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <main+0x168>
					stato_principale = STATO_DURATION;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
					break;
 80016f2:	e072      	b.n	80017da <main+0x24e>
				}

				if (strcmp(comando, "1") == 0) 			stato_corrente = STATO_MORSE_LED;
 80016f4:	4976      	ldr	r1, [pc, #472]	@ (80018d0 <main+0x344>)
 80016f6:	4875      	ldr	r0, [pc, #468]	@ (80018cc <main+0x340>)
 80016f8:	f7fe fd72 	bl	80001e0 <strcmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <main+0x17e>
 8001702:	2301      	movs	r3, #1
 8001704:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				else if (strcmp(comando, "2") == 0)     stato_corrente = STATO_MORSE_BUZZER;
				else if (strcmp(comando, "3") == 0)     stato_corrente = STATO_MORSE_LED_BUZZER;
				else if (strcmp(comando, "4") == 0)     stato_corrente = STATO_MORSE_LED_UART;
				else					                stato_corrente = STATO_MENU;  // torna al menu stato 0 di suqesto switch
				break;//STATO_MENU
 8001708:	e067      	b.n	80017da <main+0x24e>
				else if (strcmp(comando, "2") == 0)     stato_corrente = STATO_MORSE_BUZZER;
 800170a:	4972      	ldr	r1, [pc, #456]	@ (80018d4 <main+0x348>)
 800170c:	486f      	ldr	r0, [pc, #444]	@ (80018cc <main+0x340>)
 800170e:	f7fe fd67 	bl	80001e0 <strcmp>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <main+0x194>
 8001718:	2302      	movs	r3, #2
 800171a:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				break;//STATO_MENU
 800171e:	e05c      	b.n	80017da <main+0x24e>
				else if (strcmp(comando, "3") == 0)     stato_corrente = STATO_MORSE_LED_BUZZER;
 8001720:	496f      	ldr	r1, [pc, #444]	@ (80018e0 <main+0x354>)
 8001722:	486a      	ldr	r0, [pc, #424]	@ (80018cc <main+0x340>)
 8001724:	f7fe fd5c 	bl	80001e0 <strcmp>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <main+0x1aa>
 800172e:	2303      	movs	r3, #3
 8001730:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				break;//STATO_MENU
 8001734:	e051      	b.n	80017da <main+0x24e>
				else if (strcmp(comando, "4") == 0)     stato_corrente = STATO_MORSE_LED_UART;
 8001736:	496b      	ldr	r1, [pc, #428]	@ (80018e4 <main+0x358>)
 8001738:	4864      	ldr	r0, [pc, #400]	@ (80018cc <main+0x340>)
 800173a:	f7fe fd51 	bl	80001e0 <strcmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <main+0x1c0>
 8001744:	2304      	movs	r3, #4
 8001746:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				break;//STATO_MENU
 800174a:	e046      	b.n	80017da <main+0x24e>
				else					                stato_corrente = STATO_MENU;  // torna al menu stato 0 di suqesto switch
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				break;//STATO_MENU
 8001752:	e042      	b.n	80017da <main+0x24e>

			case STATO_MORSE_LED:
				esegui_traduzione_morse(1, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fbad 	bl	8000eb8 <esegui_traduzione_morse>
				if (ricevi_comando_uart(comando)) {
 800175e:	485b      	ldr	r0, [pc, #364]	@ (80018cc <main+0x340>)
 8001760:	f7ff fb5a 	bl	8000e18 <ricevi_comando_uart>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d030      	beq.n	80017cc <main+0x240>
					stato_principale = STATO_DURATION;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
					break;
 8001770:	e033      	b.n	80017da <main+0x24e>
				}
				break;//STATO_MORSE_LED

			case STATO_MORSE_BUZZER:
				esegui_traduzione_morse(0, 1, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2101      	movs	r1, #1
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fb9e 	bl	8000eb8 <esegui_traduzione_morse>
				if (ricevi_comando_uart(comando)) {
 800177c:	4853      	ldr	r0, [pc, #332]	@ (80018cc <main+0x340>)
 800177e:	f7ff fb4b 	bl	8000e18 <ricevi_comando_uart>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <main+0x244>
					stato_principale = STATO_DURATION;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
					break;
 800178e:	e024      	b.n	80017da <main+0x24e>
				}
				break;//STATO_MORSE_BUZZER:

			case STATO_MORSE_LED_BUZZER:
				esegui_traduzione_morse(1, 1, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2101      	movs	r1, #1
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fb8f 	bl	8000eb8 <esegui_traduzione_morse>
				if (ricevi_comando_uart(comando)) {
 800179a:	484c      	ldr	r0, [pc, #304]	@ (80018cc <main+0x340>)
 800179c:	f7ff fb3c 	bl	8000e18 <ricevi_comando_uart>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d016      	beq.n	80017d4 <main+0x248>
					stato_principale = STATO_DURATION;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
					break;
 80017ac:	e015      	b.n	80017da <main+0x24e>
				}
				break;//STATO_MORSE_LED_BUZZER:

			case STATO_MORSE_LED_UART:
				esegui_traduzione_morse(1, 0, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2100      	movs	r1, #0
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff fb80 	bl	8000eb8 <esegui_traduzione_morse>
				if (ricevi_comando_uart(comando)) {
 80017b8:	4844      	ldr	r0, [pc, #272]	@ (80018cc <main+0x340>)
 80017ba:	f7ff fb2d 	bl	8000e18 <ricevi_comando_uart>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <main+0x24c>
					stato_principale = STATO_DURATION;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
					break;
 80017ca:	e006      	b.n	80017da <main+0x24e>
				break;//STATO_MORSE_LED
 80017cc:	bf00      	nop
 80017ce:	e06e      	b.n	80018ae <main+0x322>
				break;//STATO_MORSE_BUZZER:
 80017d0:	bf00      	nop
 80017d2:	e06c      	b.n	80018ae <main+0x322>
				break;//STATO_MORSE_LED_BUZZER:
 80017d4:	bf00      	nop
 80017d6:	e06a      	b.n	80018ae <main+0x322>
				}
				break;//STATO_MORSE_LED_UART
 80017d8:	bf00      	nop
		}//switch (stato_corrente)
		break;//STATO_LETTERS_TO_MORSE
 80017da:	e068      	b.n	80018ae <main+0x322>
//	case STATO_MORSE_TO_LETTERS:
//		stato_morse_to_letter();
//		break;//STATO_MORSE_TO_LETTER

	case STATO_MORSE_TO_LETTERS:
		switch (stato_M2L){
 80017dc:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d061      	beq.n	80018a8 <main+0x31c>
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	f73f aef0 	bgt.w	80015ca <main+0x3e>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <main+0x268>
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d057      	beq.n	80018a2 <main+0x316>
 80017f2:	e07d      	b.n	80018f0 <main+0x364>

			case STATO_SETTING_M2L:
				char menu[512];
				sprintf(menu,
 80017f4:	4b3c      	ldr	r3, [pc, #240]	@ (80018e8 <main+0x35c>)
 80017f6:	681e      	ldr	r6, [r3, #0]
 80017f8:	4b3b      	ldr	r3, [pc, #236]	@ (80018e8 <main+0x35c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	eb03 0c02 	add.w	ip, r3, r2
 8001804:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <main+0x35c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	1899      	adds	r1, r3, r2
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <main+0x35c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a98      	subs	r0, r3, r2
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <main+0x35c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	00da      	lsls	r2, r3, #3
 8001824:	1ad4      	subs	r4, r2, r3
 8001826:	4b30      	ldr	r3, [pc, #192]	@ (80018e8 <main+0x35c>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00da      	lsls	r2, r3, #3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	1d3d      	adds	r5, r7, #4
 8001836:	9303      	str	r3, [sp, #12]
 8001838:	9402      	str	r4, [sp, #8]
 800183a:	9001      	str	r0, [sp, #4]
 800183c:	9100      	str	r1, [sp, #0]
 800183e:	4663      	mov	r3, ip
 8001840:	4632      	mov	r2, r6
 8001842:	492a      	ldr	r1, [pc, #168]	@ (80018ec <main+0x360>)
 8001844:	4628      	mov	r0, r5
 8001846:	f002 fc6f 	bl	8004128 <siprintf>
				    3 * dot_duration, 3 * dot_duration,
				    7 * dot_duration, 21 * dot_duration,
					21 * dot_duration
				);

				HAL_UART_Transmit(&huart2, (uint8_t*)menu, strlen(menu), HAL_MAX_DELAY);
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fcd1 	bl	80001f4 <strlen>
 8001852:	4603      	mov	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	1d39      	adds	r1, r7, #4
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	4819      	ldr	r0, [pc, #100]	@ (80018c4 <main+0x338>)
 800185e:	f001 ff89 	bl	8003774 <HAL_UART_Transmit>

				if (ricevi_comando_uart(comando)) {
 8001862:	481a      	ldr	r0, [pc, #104]	@ (80018cc <main+0x340>)
 8001864:	f7ff fad8 	bl	8000e18 <ricevi_comando_uart>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <main+0x2ea>
					stato_principale = STATO_SETTINGS;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				break;
 8001874:	e03c      	b.n	80018f0 <main+0x364>
				}


				if (strcmp(comando, "1") == 0) 			stato_M2L = STATO_NORMAL;
 8001876:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <main+0x344>)
 8001878:	4814      	ldr	r0, [pc, #80]	@ (80018cc <main+0x340>)
 800187a:	f7fe fcb1 	bl	80001e0 <strcmp>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <main+0x300>
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
				else if (strcmp(comando, "2") == 0)     stato_M2L = STATO_DEBUG;
				break;//STATO_SETTING_M2L
 800188a:	e012      	b.n	80018b2 <main+0x326>
				else if (strcmp(comando, "2") == 0)     stato_M2L = STATO_DEBUG;
 800188c:	4911      	ldr	r1, [pc, #68]	@ (80018d4 <main+0x348>)
 800188e:	480f      	ldr	r0, [pc, #60]	@ (80018cc <main+0x340>)
 8001890:	f7fe fca6 	bl	80001e0 <strcmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10b      	bne.n	80018b2 <main+0x326>
 800189a:	2302      	movs	r3, #2
 800189c:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
				break;//STATO_SETTING_M2L
 80018a0:	e007      	b.n	80018b2 <main+0x326>

			case STATO_NORMAL:
				stato_morse_to_letter();
 80018a2:	f000 f93f 	bl	8001b24 <stato_morse_to_letter>
				break;//STATO_NORMAL
 80018a6:	e023      	b.n	80018f0 <main+0x364>

			case STATO_DEBUG:
				stato_morse_to_letter_debug();
 80018a8:	f000 f964 	bl	8001b74 <stato_morse_to_letter_debug>
//				stato_morse_to_letter();
			break;//STATO_NORMAL
 80018ac:	e020      	b.n	80018f0 <main+0x364>
		break;//STATO_LETTERS_TO_MORSE
 80018ae:	bf00      	nop
 80018b0:	e68b      	b.n	80015ca <main+0x3e>
				break;//STATO_SETTING_M2L
 80018b2:	bf00      	nop
 80018b4:	e689      	b.n	80015ca <main+0x3e>
 80018b6:	bf00      	nop
 80018b8:	200001cc 	.word	0x200001cc
 80018bc:	20000118 	.word	0x20000118
 80018c0:	08004e80 	.word	0x08004e80
 80018c4:	20000220 	.word	0x20000220
 80018c8:	08005068 	.word	0x08005068
 80018cc:	2000026c 	.word	0x2000026c
 80018d0:	080050b0 	.word	0x080050b0
 80018d4:	080050b4 	.word	0x080050b4
 80018d8:	080050b8 	.word	0x080050b8
 80018dc:	080050cc 	.word	0x080050cc
 80018e0:	0800511c 	.word	0x0800511c
 80018e4:	08005120 	.word	0x08005120
 80018e8:	20000000 	.word	0x20000000
 80018ec:	08005124 	.word	0x08005124
	switch (stato_principale) {
 80018f0:	e66b      	b.n	80015ca <main+0x3e>
 80018f2:	bf00      	nop

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	@ 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2230      	movs	r2, #48	@ 0x30
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fc32 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <SystemClock_Config+0xb8>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <SystemClock_Config+0xb8>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <SystemClock_Config+0xb8>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <SystemClock_Config+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001940:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <SystemClock_Config+0xbc>)
 8001942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <SystemClock_Config+0xbc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195c:	2310      	movs	r3, #16
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fa5b 	bl	8002e24 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001974:	f000 f926 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f001 fcbe 	bl	8003314 <HAL_RCC_ClockConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800199e:	f000 f911 	bl	8001bc4 <Error_Handler>
  }
}
 80019a2:	bf00      	nop
 80019a4:	3750      	adds	r7, #80	@ 0x50
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000

080019b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019ba:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <MX_I2C1_Init+0x54>)
 80019bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019c0:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <MX_I2C1_Init+0x58>)
 80019c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019f2:	f000 fd79 	bl	80024e8 <HAL_I2C_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f000 f8e2 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200001cc 	.word	0x200001cc
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	000186a0 	.word	0x000186a0

08001a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <MX_USART2_UART_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a48:	f001 fe44 	bl	80036d4 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 f8b7 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000220 	.word	0x20000220
 8001a60:	40004400 	.word	0x40004400

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b23      	ldr	r3, [pc, #140]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_GPIO_Init+0xb4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2160      	movs	r1, #96	@ 0x60
 8001ad2:	4812      	ldr	r0, [pc, #72]	@ (8001b1c <MX_GPIO_Init+0xb8>)
 8001ad4:	f000 fcee 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <MX_GPIO_Init+0xbc>)
 8001aee:	f000 fb45 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001af2:	2360      	movs	r3, #96	@ 0x60
 8001af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <MX_GPIO_Init+0xb8>)
 8001b0a:	f000 fb37 	bl	800217c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020800 	.word	0x40020800

08001b24 <stato_morse_to_letter>:

/* USER CODE BEGIN 4 */


void stato_morse_to_letter(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	  now = HAL_GetTick();
 8001b28:	f000 fa12 	bl	8001f50 <HAL_GetTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <stato_morse_to_letter+0x48>)
 8001b30:	6013      	str	r3, [r2, #0]
	  gestisci_inizio_pressione(&morse_ctx, now);
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <stato_morse_to_letter+0x48>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <stato_morse_to_letter+0x4c>)
 8001b3a:	f7fe ff31 	bl	80009a0 <gestisci_inizio_pressione>
	  gestisci_fine_pressione(&morse_ctx, now);
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <stato_morse_to_letter+0x48>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	480a      	ldr	r0, [pc, #40]	@ (8001b70 <stato_morse_to_letter+0x4c>)
 8001b46:	f7fe ff4d 	bl	80009e4 <gestisci_fine_pressione>
	  gestisci_spaziatura(&morse_ctx, now);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <stato_morse_to_letter+0x48>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <stato_morse_to_letter+0x4c>)
 8001b52:	f7fe fff3 	bl	8000b3c <gestisci_spaziatura>
	  invia_parola(&morse_ctx, now);
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <stato_morse_to_letter+0x48>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <stato_morse_to_letter+0x4c>)
 8001b5e:	f7ff f8af 	bl	8000cc0 <invia_parola>

	  HAL_Delay(10);
 8001b62:	200a      	movs	r0, #10
 8001b64:	f000 fa00 	bl	8001f68 <HAL_Delay>
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000268 	.word	0x20000268
 8001b70:	20000118 	.word	0x20000118

08001b74 <stato_morse_to_letter_debug>:

void stato_morse_to_letter_debug(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	  now = HAL_GetTick();
 8001b78:	f000 f9ea 	bl	8001f50 <HAL_GetTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <stato_morse_to_letter_debug+0x48>)
 8001b80:	6013      	str	r3, [r2, #0]
	  gestisci_inizio_pressione(&morse_ctx, now);
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <stato_morse_to_letter_debug+0x48>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <stato_morse_to_letter_debug+0x4c>)
 8001b8a:	f7fe ff09 	bl	80009a0 <gestisci_inizio_pressione>
	  gestisci_fine_pressione_debug(&morse_ctx, now);
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <stato_morse_to_letter_debug+0x48>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	480a      	ldr	r0, [pc, #40]	@ (8001bc0 <stato_morse_to_letter_debug+0x4c>)
 8001b96:	f7fe ff6f 	bl	8000a78 <gestisci_fine_pressione_debug>
	  gestisci_spaziatura_debug(&morse_ctx, now);
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <stato_morse_to_letter_debug+0x48>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <stato_morse_to_letter_debug+0x4c>)
 8001ba2:	f7ff f811 	bl	8000bc8 <gestisci_spaziatura_debug>
	  invia_parola_debug(&morse_ctx, now);
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <stato_morse_to_letter_debug+0x48>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <stato_morse_to_letter_debug+0x4c>)
 8001bae:	f7ff f8f7 	bl	8000da0 <invia_parola_debug>
	  HAL_Delay(10);
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	f000 f9d8 	bl	8001f68 <HAL_Delay>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000268 	.word	0x20000268
 8001bc0:	20000118 	.word	0x20000118

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <Error_Handler+0x8>

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <HAL_I2C_MspInit+0x84>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12c      	bne.n	8001c9c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_I2C_MspInit+0x88>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ca8 <HAL_I2C_MspInit+0x88>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_I2C_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c64:	2312      	movs	r3, #18
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c70:	2304      	movs	r3, #4
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480c      	ldr	r0, [pc, #48]	@ (8001cac <HAL_I2C_MspInit+0x8c>)
 8001c7c:	f000 fa7e 	bl	800217c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_I2C_MspInit+0x88>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_I2C_MspInit+0x88>)
 8001c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_I2C_MspInit+0x88>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	@ 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020400 	.word	0x40020400

08001cb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <HAL_UART_MspInit+0x84>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12b      	bne.n	8001d2a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <HAL_UART_MspInit+0x88>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a17      	ldr	r2, [pc, #92]	@ (8001d38 <HAL_UART_MspInit+0x88>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_UART_MspInit+0x88>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_UART_MspInit+0x88>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_UART_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_UART_MspInit+0x8c>)
 8001d26:	f000 fa29 	bl	800217c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40004400 	.word	0x40004400
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <NMI_Handler+0x4>

08001d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d96:	f000 f8c7 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f002 f9f6 	bl	80041c0 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20018000 	.word	0x20018000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	2000028c 	.word	0x2000028c
 8001e08:	200003e0 	.word	0x200003e0

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e34:	f7ff ffea 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f002 f9b5 	bl	80041cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff fb93 	bl	800158c <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001e74:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8001e78:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001e7c:	200003dc 	.word	0x200003dc

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_Init+0x40>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f931 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fe8a 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f93b 	bl	8002162 <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f911 	bl	800212a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200000a0 	.word	0x200000a0
 8001f20:	200000a8 	.word	0x200000a8
 8001f24:	200000a4 	.word	0x200000a4

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200000a8 	.word	0x200000a8
 8001f4c:	20000290 	.word	0x20000290

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000290 	.word	0x20000290

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000a8 	.word	0x200000a8

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	@ (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	@ (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	@ 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff8e 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff47 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff5c 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff8e 	bl	8002068 <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5d 	bl	8002014 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffb0 	bl	80020d0 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	@ 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e159      	b.n	800244c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8148 	bne.w	8002446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d005      	beq.n	80021ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b03      	cmp	r3, #3
 800223a:	d017      	beq.n	800226c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d123      	bne.n	80022c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3208      	adds	r2, #8
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a2 	beq.w	8002446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b57      	ldr	r3, [pc, #348]	@ (8002464 <HAL_GPIO_Init+0x2e8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_GPIO_Init+0x2e8>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b54      	ldr	r3, [pc, #336]	@ (8002464 <HAL_GPIO_Init+0x2e8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_GPIO_Init+0x2ec>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a49      	ldr	r2, [pc, #292]	@ (800246c <HAL_GPIO_Init+0x2f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x202>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a48      	ldr	r2, [pc, #288]	@ (8002470 <HAL_GPIO_Init+0x2f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x1fe>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <HAL_GPIO_Init+0x2f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x1fa>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a46      	ldr	r2, [pc, #280]	@ (8002478 <HAL_GPIO_Init+0x2fc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x1f6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a45      	ldr	r2, [pc, #276]	@ (800247c <HAL_GPIO_Init+0x300>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x1f2>
 800236a:	2304      	movs	r3, #4
 800236c:	e008      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800236e:	2307      	movs	r3, #7
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x204>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_Init+0x204>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800237e:	2300      	movs	r3, #0
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	4093      	lsls	r3, r2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002390:	4935      	ldr	r1, [pc, #212]	@ (8002468 <HAL_GPIO_Init+0x2ec>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f2:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002416:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <HAL_GPIO_Init+0x304>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002440:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	f67f aea2 	bls.w	8002198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e12b      	b.n	8002752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fb86 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800253a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800254a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800254c:	f001 f89a 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8002550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a81      	ldr	r2, [pc, #516]	@ (800275c <HAL_I2C_Init+0x274>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d807      	bhi.n	800256c <HAL_I2C_Init+0x84>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a80      	ldr	r2, [pc, #512]	@ (8002760 <HAL_I2C_Init+0x278>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e006      	b.n	800257a <HAL_I2C_Init+0x92>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a7d      	ldr	r2, [pc, #500]	@ (8002764 <HAL_I2C_Init+0x27c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0e7      	b.n	8002752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a78      	ldr	r2, [pc, #480]	@ (8002768 <HAL_I2C_Init+0x280>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	@ (800275c <HAL_I2C_Init+0x274>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d802      	bhi.n	80025bc <HAL_I2C_Init+0xd4>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	e009      	b.n	80025d0 <HAL_I2C_Init+0xe8>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a69      	ldr	r2, [pc, #420]	@ (800276c <HAL_I2C_Init+0x284>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	3301      	adds	r3, #1
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	495c      	ldr	r1, [pc, #368]	@ (800275c <HAL_I2C_Init+0x274>)
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d819      	bhi.n	8002624 <HAL_I2C_Init+0x13c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e59      	subs	r1, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002604:	400b      	ands	r3, r1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_I2C_Init+0x138>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e59      	subs	r1, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fbb1 f3f3 	udiv	r3, r1, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	e051      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002620:	2304      	movs	r3, #4
 8002622:	e04f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_I2C_Init+0x168>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e012      	b.n	8002676 <HAL_I2C_Init+0x18e>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	0099      	lsls	r1, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x196>
 800267a:	2301      	movs	r3, #1
 800267c:	e022      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_I2C_Init+0x1bc>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e58      	subs	r0, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	fbb0 f3f3 	udiv	r3, r0, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a2:	e00f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	6809      	ldr	r1, [r1, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6911      	ldr	r1, [r2, #16]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	000186a0 	.word	0x000186a0
 8002760:	001e847f 	.word	0x001e847f
 8002764:	003d08ff 	.word	0x003d08ff
 8002768:	431bde83 	.word	0x431bde83
 800276c:	10624dd3 	.word	0x10624dd3

08002770 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
 8002780:	4613      	mov	r3, r2
 8002782:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fbe4 	bl	8001f50 <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 80e0 	bne.w	8002958 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	4970      	ldr	r1, [pc, #448]	@ (8002964 <HAL_I2C_Master_Transmit+0x1f4>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f964 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	e0d3      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x50>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0cc      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d007      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2221      	movs	r2, #33	@ 0x21
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2210      	movs	r2, #16
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a50      	ldr	r2, [pc, #320]	@ (8002968 <HAL_I2C_Master_Transmit+0x1f8>)
 8002826:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f89c 	bl	800296c <I2C_MasterRequestWrite>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e08d      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002854:	e066      	b.n	8002924 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa22 	bl	8002ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_I2C_Master_Transmit+0x188>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	6a39      	ldr	r1, [r7, #32]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa19 	bl	8002d34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00d      	beq.n	8002924 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	2b04      	cmp	r3, #4
 800290e:	d107      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01a      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d194      	bne.n	8002856 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000

0800296c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d006      	beq.n	8002996 <I2C_MasterRequestWrite+0x2a>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d003      	beq.n	8002996 <I2C_MasterRequestWrite+0x2a>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002994:	d108      	bne.n	80029a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e00b      	b.n	80029c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	d107      	bne.n	80029c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f84f 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e6:	d103      	bne.n	80029f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e035      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029fc:	d108      	bne.n	8002a10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	e01b      	b.n	8002a48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a10:	897b      	ldrh	r3, [r7, #10]
 8002a12:	11db      	asrs	r3, r3, #7
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 0306 	and.w	r3, r3, #6
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f063 030f 	orn	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <I2C_MasterRequestWrite+0xfc>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f898 	bl	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e010      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4907      	ldr	r1, [pc, #28]	@ (8002a6c <I2C_MasterRequestWrite+0x100>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f888 	bl	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010008 	.word	0x00010008
 8002a6c:	00010002 	.word	0x00010002

08002a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a80:	e048      	b.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d044      	beq.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7ff fa61 	bl	8001f50 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d139      	bne.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10d      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	e00c      	b.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d116      	bne.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e023      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10d      	bne.n	8002b3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	43da      	mvns	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	e00c      	b.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d093      	beq.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b72:	e071      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b82:	d123      	bne.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e067      	b.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d041      	beq.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7ff f9bc 	bl	8001f50 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d136      	bne.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10c      	bne.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e00b      	b.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e021      	b.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	0c1b      	lsrs	r3, r3, #16
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10c      	bne.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e00b      	b.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af6d 	bne.w	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb0:	e034      	b.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f886 	bl	8002dc4 <I2C_IsAcknowledgeFailed>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e034      	b.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d028      	beq.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7ff f941 	bl	8001f50 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11d      	bne.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d016      	beq.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b80      	cmp	r3, #128	@ 0x80
 8002d28:	d1c3      	bne.n	8002cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f83e 	bl	8002dc4 <I2C_IsAcknowledgeFailed>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e034      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d028      	beq.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7ff f8f9 	bl	8001f50 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d016      	beq.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d1c3      	bne.n	8002d42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d11b      	bne.n	8002e14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002de4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e42:	4b88      	ldr	r3, [pc, #544]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff f838 	bl	8001f50 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff f834 	bl	8001f50 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	@ 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff f824 	bl	8001f50 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7ff f820 	bl	8001f50 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	@ 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe ffd9 	bl	8001f50 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe ffd5 	bl	8001f50 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe ffb8 	bl	8001f50 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe ffb4 	bl	8001f50 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe ff98 	bl	8001f50 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe ff94 	bl	8001f50 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe ff81 	bl	8001f50 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003052:	f7fe ff7d 	bl	8001f50 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe ff3d 	bl	8001f50 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe ff39 	bl	8001f50 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	@ 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	@ 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	@ 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	@ 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fefe 	bl	8001f50 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fefa 	bl	8001f50 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fee8 	bl	8001f50 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fee4 	bl	8001f50 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe feb8 	bl	8001f50 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe feb4 	bl	8001f50 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fe8d 	bl	8001f50 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fe89 	bl	8001f50 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fe76 	bl	8001f50 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fe72 	bl	8001f50 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fda4 	bl	8001f50 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fda0 	bl	8001f50 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fd04 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	0800529c 	.word	0x0800529c
 80034d8:	200000a0 	.word	0x200000a0
 80034dc:	200000a4 	.word	0x200000a4

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b090      	sub	sp, #64	@ 0x40
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b59      	ldr	r3, [pc, #356]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80a1 	bhi.w	800364c <HAL_RCC_GetSysClockFreq+0x16c>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e09b      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b53      	ldr	r3, [pc, #332]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x184>)
 8003516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003518:	e09b      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b53      	ldr	r3, [pc, #332]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800351c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800351e:	e098      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b4f      	ldr	r3, [pc, #316]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b4d      	ldr	r3, [pc, #308]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d028      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b4a      	ldr	r3, [pc, #296]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	627a      	str	r2, [r7, #36]	@ 0x24
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003548:	2100      	movs	r1, #0
 800354a:	4b47      	ldr	r3, [pc, #284]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800354c:	fb03 f201 	mul.w	r2, r3, r1
 8003550:	2300      	movs	r3, #0
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	4413      	add	r3, r2
 8003558:	4a43      	ldr	r2, [pc, #268]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800355a:	fba0 1202 	umull	r1, r2, r0, r2
 800355e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003560:	460a      	mov	r2, r1
 8003562:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003566:	4413      	add	r3, r2
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	2200      	movs	r2, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800357a:	f7fc fe99 	bl	80002b0 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4613      	mov	r3, r2
 8003584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003586:	e053      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003588:	4b35      	ldr	r3, [pc, #212]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	2200      	movs	r2, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	617a      	str	r2, [r7, #20]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800359a:	f04f 0b00 	mov.w	fp, #0
 800359e:	4652      	mov	r2, sl
 80035a0:	465b      	mov	r3, fp
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	ebb2 080a 	subs.w	r8, r2, sl
 80035ba:	eb63 090b 	sbc.w	r9, r3, fp
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035d2:	ebb2 0408 	subs.w	r4, r2, r8
 80035d6:	eb63 0509 	sbc.w	r5, r3, r9
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	00eb      	lsls	r3, r5, #3
 80035e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e8:	00e2      	lsls	r2, r4, #3
 80035ea:	4614      	mov	r4, r2
 80035ec:	461d      	mov	r5, r3
 80035ee:	eb14 030a 	adds.w	r3, r4, sl
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	eb45 030b 	adc.w	r3, r5, fp
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003606:	4629      	mov	r1, r5
 8003608:	028b      	lsls	r3, r1, #10
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003610:	4621      	mov	r1, r4
 8003612:	028a      	lsls	r2, r1, #10
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361a:	2200      	movs	r2, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	60fa      	str	r2, [r7, #12]
 8003620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003624:	f7fc fe44 	bl	80002b0 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x184>)
 800364e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003654:	4618      	mov	r0, r3
 8003656:	3740      	adds	r7, #64	@ 0x40
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	00f42400 	.word	0x00f42400
 8003668:	017d7840 	.word	0x017d7840

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	@ (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	200000a0 	.word	0x200000a0

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a9b      	lsrs	r3, r3, #10
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4903      	ldr	r1, [pc, #12]	@ (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	080052ac 	.word	0x080052ac

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b0:	f7ff ffdc 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0b5b      	lsrs	r3, r3, #13
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	@ (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	080052ac 	.word	0x080052ac

080036d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e042      	b.n	800376c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe fad8 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	@ 0x24
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa09 	bl	8003b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800372c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800373c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800374c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	@ 0x28
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b20      	cmp	r3, #32
 8003792:	d175      	bne.n	8003880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_UART_Transmit+0x2c>
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e06e      	b.n	8003882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2221      	movs	r2, #33	@ 0x21
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b2:	f7fe fbcd 	bl	8001f50 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037cc:	d108      	bne.n	80037e0 <HAL_UART_Transmit+0x6c>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e003      	b.n	80037e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037e8:	e02e      	b.n	8003848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	2180      	movs	r1, #128	@ 0x80
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f8df 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e03a      	b.n	8003882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3302      	adds	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1cb      	bne.n	80037ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2140      	movs	r1, #64	@ 0x40
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f8ab 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08a      	sub	sp, #40	@ 0x28
 800388e:	af02      	add	r7, sp, #8
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	f040 8081 	bne.w	80039ae <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_UART_Receive+0x2e>
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e079      	b.n	80039b0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2222      	movs	r2, #34	@ 0x22
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d0:	f7fe fb3e 	bl	8001f50 <HAL_GetTick>
 80038d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ea:	d108      	bne.n	80038fe <HAL_UART_Receive+0x74>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e003      	b.n	8003906 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003906:	e047      	b.n	8003998 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	2120      	movs	r1, #32
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f850 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e042      	b.n	80039b0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10c      	bne.n	800394a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393c:	b29a      	uxth	r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3302      	adds	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e01f      	b.n	800398a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003952:	d007      	beq.n	8003964 <HAL_UART_Receive+0xda>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_UART_Receive+0xe8>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e008      	b.n	8003984 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800397e:	b2da      	uxtb	r2, r3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1b2      	bne.n	8003908 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	e03b      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d037      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe fabd 	bl	8001f50 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03a      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d023      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b80      	cmp	r3, #128	@ 0x80
 80039fe:	d020      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d01d      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d116      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f81d 	bl	8003a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2208      	movs	r2, #8
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00f      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d0b4      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b095      	sub	sp, #84	@ 0x54
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a92:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d119      	bne.n	8003b16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f023 0310 	bic.w	r3, r3, #16
 8003af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b02:	61ba      	str	r2, [r7, #24]
 8003b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e5      	bne.n	8003ae2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b24:	bf00      	nop
 8003b26:	3754      	adds	r7, #84	@ 0x54
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b0c0      	sub	sp, #256	@ 0x100
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	68d9      	ldr	r1, [r3, #12]
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	ea40 0301 	orr.w	r3, r0, r1
 8003b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b88:	f021 010c 	bic.w	r1, r1, #12
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b96:	430b      	orrs	r3, r1
 8003b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003baa:	6999      	ldr	r1, [r3, #24]
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	ea40 0301 	orr.w	r3, r0, r1
 8003bb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b8f      	ldr	r3, [pc, #572]	@ (8003dfc <UART_SetConfig+0x2cc>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d005      	beq.n	8003bd0 <UART_SetConfig+0xa0>
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b8d      	ldr	r3, [pc, #564]	@ (8003e00 <UART_SetConfig+0x2d0>)
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d104      	bne.n	8003bda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7ff fd6c 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8003bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bd8:	e003      	b.n	8003be2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bda:	f7ff fd53 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8003bde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bec:	f040 810c 	bne.w	8003e08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c02:	4622      	mov	r2, r4
 8003c04:	462b      	mov	r3, r5
 8003c06:	1891      	adds	r1, r2, r2
 8003c08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c12:	4621      	mov	r1, r4
 8003c14:	eb12 0801 	adds.w	r8, r2, r1
 8003c18:	4629      	mov	r1, r5
 8003c1a:	eb43 0901 	adc.w	r9, r3, r1
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c32:	4690      	mov	r8, r2
 8003c34:	4699      	mov	r9, r3
 8003c36:	4623      	mov	r3, r4
 8003c38:	eb18 0303 	adds.w	r3, r8, r3
 8003c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c40:	462b      	mov	r3, r5
 8003c42:	eb49 0303 	adc.w	r3, r9, r3
 8003c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c5e:	460b      	mov	r3, r1
 8003c60:	18db      	adds	r3, r3, r3
 8003c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c64:	4613      	mov	r3, r2
 8003c66:	eb42 0303 	adc.w	r3, r2, r3
 8003c6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c74:	f7fc fb1c 	bl	80002b0 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <UART_SetConfig+0x2d4>)
 8003c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	011c      	lsls	r4, r3, #4
 8003c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ca8:	4641      	mov	r1, r8
 8003caa:	eb12 0a01 	adds.w	sl, r2, r1
 8003cae:	4649      	mov	r1, r9
 8003cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc8:	4692      	mov	sl, r2
 8003cca:	469b      	mov	fp, r3
 8003ccc:	4643      	mov	r3, r8
 8003cce:	eb1a 0303 	adds.w	r3, sl, r3
 8003cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	18db      	adds	r3, r3, r3
 8003cf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	eb42 0303 	adc.w	r3, r2, r3
 8003d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d0a:	f7fc fad1 	bl	80002b0 <__aeabi_uldivmod>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <UART_SetConfig+0x2d4>)
 8003d16:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2264      	movs	r2, #100	@ 0x64
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	1acb      	subs	r3, r1, r3
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d2a:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <UART_SetConfig+0x2d4>)
 8003d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d38:	441c      	add	r4, r3
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d54:	415b      	adcs	r3, r3
 8003d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	1851      	adds	r1, r2, r1
 8003d60:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d62:	4649      	mov	r1, r9
 8003d64:	414b      	adcs	r3, r1
 8003d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d74:	4659      	mov	r1, fp
 8003d76:	00cb      	lsls	r3, r1, #3
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7e:	4651      	mov	r1, sl
 8003d80:	00ca      	lsls	r2, r1, #3
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d90:	464b      	mov	r3, r9
 8003d92:	460a      	mov	r2, r1
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003da8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003db0:	460b      	mov	r3, r1
 8003db2:	18db      	adds	r3, r3, r3
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db6:	4613      	mov	r3, r2
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dc6:	f7fc fa73 	bl	80002b0 <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <UART_SetConfig+0x2d4>)
 8003dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	2164      	movs	r1, #100	@ 0x64
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	3332      	adds	r3, #50	@ 0x32
 8003de2:	4a08      	ldr	r2, [pc, #32]	@ (8003e04 <UART_SetConfig+0x2d4>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	f003 0207 	and.w	r2, r3, #7
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4422      	add	r2, r4
 8003df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003df8:	e106      	b.n	8004008 <UART_SetConfig+0x4d8>
 8003dfa:	bf00      	nop
 8003dfc:	40011000 	.word	0x40011000
 8003e00:	40011400 	.word	0x40011400
 8003e04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e1a:	4642      	mov	r2, r8
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	6239      	str	r1, [r7, #32]
 8003e22:	415b      	adcs	r3, r3
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	1854      	adds	r4, r2, r1
 8003e2e:	4649      	mov	r1, r9
 8003e30:	eb43 0501 	adc.w	r5, r3, r1
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	00eb      	lsls	r3, r5, #3
 8003e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e42:	00e2      	lsls	r2, r4, #3
 8003e44:	4614      	mov	r4, r2
 8003e46:	461d      	mov	r5, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	18e3      	adds	r3, r4, r3
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e50:	464b      	mov	r3, r9
 8003e52:	eb45 0303 	adc.w	r3, r5, r3
 8003e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e76:	4629      	mov	r1, r5
 8003e78:	008b      	lsls	r3, r1, #2
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e80:	4621      	mov	r1, r4
 8003e82:	008a      	lsls	r2, r1, #2
 8003e84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e88:	f7fc fa12 	bl	80002b0 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b60      	ldr	r3, [pc, #384]	@ (8004014 <UART_SetConfig+0x4e4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ea4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	61b9      	str	r1, [r7, #24]
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	1851      	adds	r1, r2, r1
 8003ec0:	6139      	str	r1, [r7, #16]
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	414b      	adcs	r3, r1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	00cb      	lsls	r3, r1, #3
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ede:	4651      	mov	r1, sl
 8003ee0:	00ca      	lsls	r2, r1, #3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	eb42 0303 	adc.w	r3, r2, r3
 8003ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f14:	4649      	mov	r1, r9
 8003f16:	008b      	lsls	r3, r1, #2
 8003f18:	4641      	mov	r1, r8
 8003f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f1e:	4641      	mov	r1, r8
 8003f20:	008a      	lsls	r2, r1, #2
 8003f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f26:	f7fc f9c3 	bl	80002b0 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4b38      	ldr	r3, [pc, #224]	@ (8004014 <UART_SetConfig+0x4e4>)
 8003f32:	fba3 2301 	umull	r2, r3, r3, r1
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2264      	movs	r2, #100	@ 0x64
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	1acb      	subs	r3, r1, r3
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	3332      	adds	r3, #50	@ 0x32
 8003f44:	4a33      	ldr	r2, [pc, #204]	@ (8004014 <UART_SetConfig+0x4e4>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f50:	441c      	add	r4, r3
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	eb42 0303 	adc.w	r3, r2, r3
 8003faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	008b      	lsls	r3, r1, #2
 8003fc8:	4641      	mov	r1, r8
 8003fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fce:	4641      	mov	r1, r8
 8003fd0:	008a      	lsls	r2, r1, #2
 8003fd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fd6:	f7fc f96b 	bl	80002b0 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <UART_SetConfig+0x4e4>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	@ 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	@ 0x32
 8003ff2:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <UART_SetConfig+0x4e4>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 020f 	and.w	r2, r3, #15
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4422      	add	r2, r4
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800400e:	46bd      	mov	sp, r7
 8004010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <atoi>:
 8004018:	220a      	movs	r2, #10
 800401a:	2100      	movs	r1, #0
 800401c:	f000 b87a 	b.w	8004114 <strtol>

08004020 <_strtol_l.isra.0>:
 8004020:	2b24      	cmp	r3, #36	@ 0x24
 8004022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004026:	4686      	mov	lr, r0
 8004028:	4690      	mov	r8, r2
 800402a:	d801      	bhi.n	8004030 <_strtol_l.isra.0+0x10>
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <_strtol_l.isra.0+0x1e>
 8004030:	f000 f8c6 	bl	80041c0 <__errno>
 8004034:	2316      	movs	r3, #22
 8004036:	6003      	str	r3, [r0, #0]
 8004038:	2000      	movs	r0, #0
 800403a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403e:	4834      	ldr	r0, [pc, #208]	@ (8004110 <_strtol_l.isra.0+0xf0>)
 8004040:	460d      	mov	r5, r1
 8004042:	462a      	mov	r2, r5
 8004044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004048:	5d06      	ldrb	r6, [r0, r4]
 800404a:	f016 0608 	ands.w	r6, r6, #8
 800404e:	d1f8      	bne.n	8004042 <_strtol_l.isra.0+0x22>
 8004050:	2c2d      	cmp	r4, #45	@ 0x2d
 8004052:	d110      	bne.n	8004076 <_strtol_l.isra.0+0x56>
 8004054:	782c      	ldrb	r4, [r5, #0]
 8004056:	2601      	movs	r6, #1
 8004058:	1c95      	adds	r5, r2, #2
 800405a:	f033 0210 	bics.w	r2, r3, #16
 800405e:	d115      	bne.n	800408c <_strtol_l.isra.0+0x6c>
 8004060:	2c30      	cmp	r4, #48	@ 0x30
 8004062:	d10d      	bne.n	8004080 <_strtol_l.isra.0+0x60>
 8004064:	782a      	ldrb	r2, [r5, #0]
 8004066:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800406a:	2a58      	cmp	r2, #88	@ 0x58
 800406c:	d108      	bne.n	8004080 <_strtol_l.isra.0+0x60>
 800406e:	786c      	ldrb	r4, [r5, #1]
 8004070:	3502      	adds	r5, #2
 8004072:	2310      	movs	r3, #16
 8004074:	e00a      	b.n	800408c <_strtol_l.isra.0+0x6c>
 8004076:	2c2b      	cmp	r4, #43	@ 0x2b
 8004078:	bf04      	itt	eq
 800407a:	782c      	ldrbeq	r4, [r5, #0]
 800407c:	1c95      	addeq	r5, r2, #2
 800407e:	e7ec      	b.n	800405a <_strtol_l.isra.0+0x3a>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f6      	bne.n	8004072 <_strtol_l.isra.0+0x52>
 8004084:	2c30      	cmp	r4, #48	@ 0x30
 8004086:	bf14      	ite	ne
 8004088:	230a      	movne	r3, #10
 800408a:	2308      	moveq	r3, #8
 800408c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004090:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004094:	2200      	movs	r2, #0
 8004096:	fbbc f9f3 	udiv	r9, ip, r3
 800409a:	4610      	mov	r0, r2
 800409c:	fb03 ca19 	mls	sl, r3, r9, ip
 80040a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80040a4:	2f09      	cmp	r7, #9
 80040a6:	d80f      	bhi.n	80040c8 <_strtol_l.isra.0+0xa8>
 80040a8:	463c      	mov	r4, r7
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	dd1b      	ble.n	80040e6 <_strtol_l.isra.0+0xc6>
 80040ae:	1c57      	adds	r7, r2, #1
 80040b0:	d007      	beq.n	80040c2 <_strtol_l.isra.0+0xa2>
 80040b2:	4581      	cmp	r9, r0
 80040b4:	d314      	bcc.n	80040e0 <_strtol_l.isra.0+0xc0>
 80040b6:	d101      	bne.n	80040bc <_strtol_l.isra.0+0x9c>
 80040b8:	45a2      	cmp	sl, r4
 80040ba:	db11      	blt.n	80040e0 <_strtol_l.isra.0+0xc0>
 80040bc:	fb00 4003 	mla	r0, r0, r3, r4
 80040c0:	2201      	movs	r2, #1
 80040c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040c6:	e7eb      	b.n	80040a0 <_strtol_l.isra.0+0x80>
 80040c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80040cc:	2f19      	cmp	r7, #25
 80040ce:	d801      	bhi.n	80040d4 <_strtol_l.isra.0+0xb4>
 80040d0:	3c37      	subs	r4, #55	@ 0x37
 80040d2:	e7ea      	b.n	80040aa <_strtol_l.isra.0+0x8a>
 80040d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80040d8:	2f19      	cmp	r7, #25
 80040da:	d804      	bhi.n	80040e6 <_strtol_l.isra.0+0xc6>
 80040dc:	3c57      	subs	r4, #87	@ 0x57
 80040de:	e7e4      	b.n	80040aa <_strtol_l.isra.0+0x8a>
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	e7ed      	b.n	80040c2 <_strtol_l.isra.0+0xa2>
 80040e6:	1c53      	adds	r3, r2, #1
 80040e8:	d108      	bne.n	80040fc <_strtol_l.isra.0+0xdc>
 80040ea:	2322      	movs	r3, #34	@ 0x22
 80040ec:	f8ce 3000 	str.w	r3, [lr]
 80040f0:	4660      	mov	r0, ip
 80040f2:	f1b8 0f00 	cmp.w	r8, #0
 80040f6:	d0a0      	beq.n	800403a <_strtol_l.isra.0+0x1a>
 80040f8:	1e69      	subs	r1, r5, #1
 80040fa:	e006      	b.n	800410a <_strtol_l.isra.0+0xea>
 80040fc:	b106      	cbz	r6, 8004100 <_strtol_l.isra.0+0xe0>
 80040fe:	4240      	negs	r0, r0
 8004100:	f1b8 0f00 	cmp.w	r8, #0
 8004104:	d099      	beq.n	800403a <_strtol_l.isra.0+0x1a>
 8004106:	2a00      	cmp	r2, #0
 8004108:	d1f6      	bne.n	80040f8 <_strtol_l.isra.0+0xd8>
 800410a:	f8c8 1000 	str.w	r1, [r8]
 800410e:	e794      	b.n	800403a <_strtol_l.isra.0+0x1a>
 8004110:	080052b5 	.word	0x080052b5

08004114 <strtol>:
 8004114:	4613      	mov	r3, r2
 8004116:	460a      	mov	r2, r1
 8004118:	4601      	mov	r1, r0
 800411a:	4802      	ldr	r0, [pc, #8]	@ (8004124 <strtol+0x10>)
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f7ff bf7f 	b.w	8004020 <_strtol_l.isra.0>
 8004122:	bf00      	nop
 8004124:	200000ac 	.word	0x200000ac

08004128 <siprintf>:
 8004128:	b40e      	push	{r1, r2, r3}
 800412a:	b510      	push	{r4, lr}
 800412c:	b09d      	sub	sp, #116	@ 0x74
 800412e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004130:	9002      	str	r0, [sp, #8]
 8004132:	9006      	str	r0, [sp, #24]
 8004134:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004138:	480a      	ldr	r0, [pc, #40]	@ (8004164 <siprintf+0x3c>)
 800413a:	9107      	str	r1, [sp, #28]
 800413c:	9104      	str	r1, [sp, #16]
 800413e:	490a      	ldr	r1, [pc, #40]	@ (8004168 <siprintf+0x40>)
 8004140:	f853 2b04 	ldr.w	r2, [r3], #4
 8004144:	9105      	str	r1, [sp, #20]
 8004146:	2400      	movs	r4, #0
 8004148:	a902      	add	r1, sp, #8
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004150:	f000 f9b6 	bl	80044c0 <_svfiprintf_r>
 8004154:	9b02      	ldr	r3, [sp, #8]
 8004156:	701c      	strb	r4, [r3, #0]
 8004158:	b01d      	add	sp, #116	@ 0x74
 800415a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800415e:	b003      	add	sp, #12
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	200000ac 	.word	0x200000ac
 8004168:	ffff0208 	.word	0xffff0208

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <strcat>:
 800417c:	b510      	push	{r4, lr}
 800417e:	4602      	mov	r2, r0
 8004180:	7814      	ldrb	r4, [r2, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	3201      	adds	r2, #1
 8004186:	2c00      	cmp	r4, #0
 8004188:	d1fa      	bne.n	8004180 <strcat+0x4>
 800418a:	3b01      	subs	r3, #1
 800418c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004190:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004194:	2a00      	cmp	r2, #0
 8004196:	d1f9      	bne.n	800418c <strcat+0x10>
 8004198:	bd10      	pop	{r4, pc}

0800419a <strncat>:
 800419a:	b530      	push	{r4, r5, lr}
 800419c:	4604      	mov	r4, r0
 800419e:	7825      	ldrb	r5, [r4, #0]
 80041a0:	4623      	mov	r3, r4
 80041a2:	3401      	adds	r4, #1
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	d1fa      	bne.n	800419e <strncat+0x4>
 80041a8:	3a01      	subs	r2, #1
 80041aa:	d304      	bcc.n	80041b6 <strncat+0x1c>
 80041ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b0:	f803 4b01 	strb.w	r4, [r3], #1
 80041b4:	b904      	cbnz	r4, 80041b8 <strncat+0x1e>
 80041b6:	bd30      	pop	{r4, r5, pc}
 80041b8:	2a00      	cmp	r2, #0
 80041ba:	d1f5      	bne.n	80041a8 <strncat+0xe>
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e7f3      	b.n	80041a8 <strncat+0xe>

080041c0 <__errno>:
 80041c0:	4b01      	ldr	r3, [pc, #4]	@ (80041c8 <__errno+0x8>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	200000ac 	.word	0x200000ac

080041cc <__libc_init_array>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004204 <__libc_init_array+0x38>)
 80041d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004208 <__libc_init_array+0x3c>)
 80041d2:	1b64      	subs	r4, r4, r5
 80041d4:	10a4      	asrs	r4, r4, #2
 80041d6:	2600      	movs	r6, #0
 80041d8:	42a6      	cmp	r6, r4
 80041da:	d109      	bne.n	80041f0 <__libc_init_array+0x24>
 80041dc:	4d0b      	ldr	r5, [pc, #44]	@ (800420c <__libc_init_array+0x40>)
 80041de:	4c0c      	ldr	r4, [pc, #48]	@ (8004210 <__libc_init_array+0x44>)
 80041e0:	f000 fc64 	bl	8004aac <_init>
 80041e4:	1b64      	subs	r4, r4, r5
 80041e6:	10a4      	asrs	r4, r4, #2
 80041e8:	2600      	movs	r6, #0
 80041ea:	42a6      	cmp	r6, r4
 80041ec:	d105      	bne.n	80041fa <__libc_init_array+0x2e>
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f4:	4798      	blx	r3
 80041f6:	3601      	adds	r6, #1
 80041f8:	e7ee      	b.n	80041d8 <__libc_init_array+0xc>
 80041fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fe:	4798      	blx	r3
 8004200:	3601      	adds	r6, #1
 8004202:	e7f2      	b.n	80041ea <__libc_init_array+0x1e>
 8004204:	080053f0 	.word	0x080053f0
 8004208:	080053f0 	.word	0x080053f0
 800420c:	080053f0 	.word	0x080053f0
 8004210:	080053f4 	.word	0x080053f4

08004214 <__retarget_lock_acquire_recursive>:
 8004214:	4770      	bx	lr

08004216 <__retarget_lock_release_recursive>:
 8004216:	4770      	bx	lr

08004218 <_free_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4605      	mov	r5, r0
 800421c:	2900      	cmp	r1, #0
 800421e:	d041      	beq.n	80042a4 <_free_r+0x8c>
 8004220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004224:	1f0c      	subs	r4, r1, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfb8      	it	lt
 800422a:	18e4      	addlt	r4, r4, r3
 800422c:	f000 f8e0 	bl	80043f0 <__malloc_lock>
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <_free_r+0x90>)
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	b933      	cbnz	r3, 8004244 <_free_r+0x2c>
 8004236:	6063      	str	r3, [r4, #4]
 8004238:	6014      	str	r4, [r2, #0]
 800423a:	4628      	mov	r0, r5
 800423c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004240:	f000 b8dc 	b.w	80043fc <__malloc_unlock>
 8004244:	42a3      	cmp	r3, r4
 8004246:	d908      	bls.n	800425a <_free_r+0x42>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	1821      	adds	r1, r4, r0
 800424c:	428b      	cmp	r3, r1
 800424e:	bf01      	itttt	eq
 8004250:	6819      	ldreq	r1, [r3, #0]
 8004252:	685b      	ldreq	r3, [r3, #4]
 8004254:	1809      	addeq	r1, r1, r0
 8004256:	6021      	streq	r1, [r4, #0]
 8004258:	e7ed      	b.n	8004236 <_free_r+0x1e>
 800425a:	461a      	mov	r2, r3
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b10b      	cbz	r3, 8004264 <_free_r+0x4c>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d9fa      	bls.n	800425a <_free_r+0x42>
 8004264:	6811      	ldr	r1, [r2, #0]
 8004266:	1850      	adds	r0, r2, r1
 8004268:	42a0      	cmp	r0, r4
 800426a:	d10b      	bne.n	8004284 <_free_r+0x6c>
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	4401      	add	r1, r0
 8004270:	1850      	adds	r0, r2, r1
 8004272:	4283      	cmp	r3, r0
 8004274:	6011      	str	r1, [r2, #0]
 8004276:	d1e0      	bne.n	800423a <_free_r+0x22>
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	6053      	str	r3, [r2, #4]
 800427e:	4408      	add	r0, r1
 8004280:	6010      	str	r0, [r2, #0]
 8004282:	e7da      	b.n	800423a <_free_r+0x22>
 8004284:	d902      	bls.n	800428c <_free_r+0x74>
 8004286:	230c      	movs	r3, #12
 8004288:	602b      	str	r3, [r5, #0]
 800428a:	e7d6      	b.n	800423a <_free_r+0x22>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	1821      	adds	r1, r4, r0
 8004290:	428b      	cmp	r3, r1
 8004292:	bf04      	itt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	bf04      	itt	eq
 800429c:	1809      	addeq	r1, r1, r0
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	6054      	str	r4, [r2, #4]
 80042a2:	e7ca      	b.n	800423a <_free_r+0x22>
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
 80042a6:	bf00      	nop
 80042a8:	200003d8 	.word	0x200003d8

080042ac <sbrk_aligned>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4e0f      	ldr	r6, [pc, #60]	@ (80042ec <sbrk_aligned+0x40>)
 80042b0:	460c      	mov	r4, r1
 80042b2:	6831      	ldr	r1, [r6, #0]
 80042b4:	4605      	mov	r5, r0
 80042b6:	b911      	cbnz	r1, 80042be <sbrk_aligned+0x12>
 80042b8:	f000 fba4 	bl	8004a04 <_sbrk_r>
 80042bc:	6030      	str	r0, [r6, #0]
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 fb9f 	bl	8004a04 <_sbrk_r>
 80042c6:	1c43      	adds	r3, r0, #1
 80042c8:	d103      	bne.n	80042d2 <sbrk_aligned+0x26>
 80042ca:	f04f 34ff 	mov.w	r4, #4294967295
 80042ce:	4620      	mov	r0, r4
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	1cc4      	adds	r4, r0, #3
 80042d4:	f024 0403 	bic.w	r4, r4, #3
 80042d8:	42a0      	cmp	r0, r4
 80042da:	d0f8      	beq.n	80042ce <sbrk_aligned+0x22>
 80042dc:	1a21      	subs	r1, r4, r0
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 fb90 	bl	8004a04 <_sbrk_r>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d1f2      	bne.n	80042ce <sbrk_aligned+0x22>
 80042e8:	e7ef      	b.n	80042ca <sbrk_aligned+0x1e>
 80042ea:	bf00      	nop
 80042ec:	200003d4 	.word	0x200003d4

080042f0 <_malloc_r>:
 80042f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f4:	1ccd      	adds	r5, r1, #3
 80042f6:	f025 0503 	bic.w	r5, r5, #3
 80042fa:	3508      	adds	r5, #8
 80042fc:	2d0c      	cmp	r5, #12
 80042fe:	bf38      	it	cc
 8004300:	250c      	movcc	r5, #12
 8004302:	2d00      	cmp	r5, #0
 8004304:	4606      	mov	r6, r0
 8004306:	db01      	blt.n	800430c <_malloc_r+0x1c>
 8004308:	42a9      	cmp	r1, r5
 800430a:	d904      	bls.n	8004316 <_malloc_r+0x26>
 800430c:	230c      	movs	r3, #12
 800430e:	6033      	str	r3, [r6, #0]
 8004310:	2000      	movs	r0, #0
 8004312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043ec <_malloc_r+0xfc>
 800431a:	f000 f869 	bl	80043f0 <__malloc_lock>
 800431e:	f8d8 3000 	ldr.w	r3, [r8]
 8004322:	461c      	mov	r4, r3
 8004324:	bb44      	cbnz	r4, 8004378 <_malloc_r+0x88>
 8004326:	4629      	mov	r1, r5
 8004328:	4630      	mov	r0, r6
 800432a:	f7ff ffbf 	bl	80042ac <sbrk_aligned>
 800432e:	1c43      	adds	r3, r0, #1
 8004330:	4604      	mov	r4, r0
 8004332:	d158      	bne.n	80043e6 <_malloc_r+0xf6>
 8004334:	f8d8 4000 	ldr.w	r4, [r8]
 8004338:	4627      	mov	r7, r4
 800433a:	2f00      	cmp	r7, #0
 800433c:	d143      	bne.n	80043c6 <_malloc_r+0xd6>
 800433e:	2c00      	cmp	r4, #0
 8004340:	d04b      	beq.n	80043da <_malloc_r+0xea>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	4639      	mov	r1, r7
 8004346:	4630      	mov	r0, r6
 8004348:	eb04 0903 	add.w	r9, r4, r3
 800434c:	f000 fb5a 	bl	8004a04 <_sbrk_r>
 8004350:	4581      	cmp	r9, r0
 8004352:	d142      	bne.n	80043da <_malloc_r+0xea>
 8004354:	6821      	ldr	r1, [r4, #0]
 8004356:	1a6d      	subs	r5, r5, r1
 8004358:	4629      	mov	r1, r5
 800435a:	4630      	mov	r0, r6
 800435c:	f7ff ffa6 	bl	80042ac <sbrk_aligned>
 8004360:	3001      	adds	r0, #1
 8004362:	d03a      	beq.n	80043da <_malloc_r+0xea>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	442b      	add	r3, r5
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	f8d8 3000 	ldr.w	r3, [r8]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	bb62      	cbnz	r2, 80043cc <_malloc_r+0xdc>
 8004372:	f8c8 7000 	str.w	r7, [r8]
 8004376:	e00f      	b.n	8004398 <_malloc_r+0xa8>
 8004378:	6822      	ldr	r2, [r4, #0]
 800437a:	1b52      	subs	r2, r2, r5
 800437c:	d420      	bmi.n	80043c0 <_malloc_r+0xd0>
 800437e:	2a0b      	cmp	r2, #11
 8004380:	d917      	bls.n	80043b2 <_malloc_r+0xc2>
 8004382:	1961      	adds	r1, r4, r5
 8004384:	42a3      	cmp	r3, r4
 8004386:	6025      	str	r5, [r4, #0]
 8004388:	bf18      	it	ne
 800438a:	6059      	strne	r1, [r3, #4]
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	bf08      	it	eq
 8004390:	f8c8 1000 	streq.w	r1, [r8]
 8004394:	5162      	str	r2, [r4, r5]
 8004396:	604b      	str	r3, [r1, #4]
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f82f 	bl	80043fc <__malloc_unlock>
 800439e:	f104 000b 	add.w	r0, r4, #11
 80043a2:	1d23      	adds	r3, r4, #4
 80043a4:	f020 0007 	bic.w	r0, r0, #7
 80043a8:	1ac2      	subs	r2, r0, r3
 80043aa:	bf1c      	itt	ne
 80043ac:	1a1b      	subne	r3, r3, r0
 80043ae:	50a3      	strne	r3, [r4, r2]
 80043b0:	e7af      	b.n	8004312 <_malloc_r+0x22>
 80043b2:	6862      	ldr	r2, [r4, #4]
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	bf0c      	ite	eq
 80043b8:	f8c8 2000 	streq.w	r2, [r8]
 80043bc:	605a      	strne	r2, [r3, #4]
 80043be:	e7eb      	b.n	8004398 <_malloc_r+0xa8>
 80043c0:	4623      	mov	r3, r4
 80043c2:	6864      	ldr	r4, [r4, #4]
 80043c4:	e7ae      	b.n	8004324 <_malloc_r+0x34>
 80043c6:	463c      	mov	r4, r7
 80043c8:	687f      	ldr	r7, [r7, #4]
 80043ca:	e7b6      	b.n	800433a <_malloc_r+0x4a>
 80043cc:	461a      	mov	r2, r3
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	d1fb      	bne.n	80043cc <_malloc_r+0xdc>
 80043d4:	2300      	movs	r3, #0
 80043d6:	6053      	str	r3, [r2, #4]
 80043d8:	e7de      	b.n	8004398 <_malloc_r+0xa8>
 80043da:	230c      	movs	r3, #12
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 f80c 	bl	80043fc <__malloc_unlock>
 80043e4:	e794      	b.n	8004310 <_malloc_r+0x20>
 80043e6:	6005      	str	r5, [r0, #0]
 80043e8:	e7d6      	b.n	8004398 <_malloc_r+0xa8>
 80043ea:	bf00      	nop
 80043ec:	200003d8 	.word	0x200003d8

080043f0 <__malloc_lock>:
 80043f0:	4801      	ldr	r0, [pc, #4]	@ (80043f8 <__malloc_lock+0x8>)
 80043f2:	f7ff bf0f 	b.w	8004214 <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	200003d0 	.word	0x200003d0

080043fc <__malloc_unlock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	@ (8004404 <__malloc_unlock+0x8>)
 80043fe:	f7ff bf0a 	b.w	8004216 <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	200003d0 	.word	0x200003d0

08004408 <__ssputs_r>:
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	688e      	ldr	r6, [r1, #8]
 800440e:	461f      	mov	r7, r3
 8004410:	42be      	cmp	r6, r7
 8004412:	680b      	ldr	r3, [r1, #0]
 8004414:	4682      	mov	sl, r0
 8004416:	460c      	mov	r4, r1
 8004418:	4690      	mov	r8, r2
 800441a:	d82d      	bhi.n	8004478 <__ssputs_r+0x70>
 800441c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004424:	d026      	beq.n	8004474 <__ssputs_r+0x6c>
 8004426:	6965      	ldr	r5, [r4, #20]
 8004428:	6909      	ldr	r1, [r1, #16]
 800442a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800442e:	eba3 0901 	sub.w	r9, r3, r1
 8004432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004436:	1c7b      	adds	r3, r7, #1
 8004438:	444b      	add	r3, r9
 800443a:	106d      	asrs	r5, r5, #1
 800443c:	429d      	cmp	r5, r3
 800443e:	bf38      	it	cc
 8004440:	461d      	movcc	r5, r3
 8004442:	0553      	lsls	r3, r2, #21
 8004444:	d527      	bpl.n	8004496 <__ssputs_r+0x8e>
 8004446:	4629      	mov	r1, r5
 8004448:	f7ff ff52 	bl	80042f0 <_malloc_r>
 800444c:	4606      	mov	r6, r0
 800444e:	b360      	cbz	r0, 80044aa <__ssputs_r+0xa2>
 8004450:	6921      	ldr	r1, [r4, #16]
 8004452:	464a      	mov	r2, r9
 8004454:	f000 fae6 	bl	8004a24 <memcpy>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800445e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	6126      	str	r6, [r4, #16]
 8004466:	6165      	str	r5, [r4, #20]
 8004468:	444e      	add	r6, r9
 800446a:	eba5 0509 	sub.w	r5, r5, r9
 800446e:	6026      	str	r6, [r4, #0]
 8004470:	60a5      	str	r5, [r4, #8]
 8004472:	463e      	mov	r6, r7
 8004474:	42be      	cmp	r6, r7
 8004476:	d900      	bls.n	800447a <__ssputs_r+0x72>
 8004478:	463e      	mov	r6, r7
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	4632      	mov	r2, r6
 800447e:	4641      	mov	r1, r8
 8004480:	f000 faa6 	bl	80049d0 <memmove>
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	1b9b      	subs	r3, r3, r6
 8004488:	60a3      	str	r3, [r4, #8]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	4433      	add	r3, r6
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	2000      	movs	r0, #0
 8004492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004496:	462a      	mov	r2, r5
 8004498:	f000 fad2 	bl	8004a40 <_realloc_r>
 800449c:	4606      	mov	r6, r0
 800449e:	2800      	cmp	r0, #0
 80044a0:	d1e0      	bne.n	8004464 <__ssputs_r+0x5c>
 80044a2:	6921      	ldr	r1, [r4, #16]
 80044a4:	4650      	mov	r0, sl
 80044a6:	f7ff feb7 	bl	8004218 <_free_r>
 80044aa:	230c      	movs	r3, #12
 80044ac:	f8ca 3000 	str.w	r3, [sl]
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
 80044bc:	e7e9      	b.n	8004492 <__ssputs_r+0x8a>
	...

080044c0 <_svfiprintf_r>:
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	4698      	mov	r8, r3
 80044c6:	898b      	ldrh	r3, [r1, #12]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	b09d      	sub	sp, #116	@ 0x74
 80044cc:	4607      	mov	r7, r0
 80044ce:	460d      	mov	r5, r1
 80044d0:	4614      	mov	r4, r2
 80044d2:	d510      	bpl.n	80044f6 <_svfiprintf_r+0x36>
 80044d4:	690b      	ldr	r3, [r1, #16]
 80044d6:	b973      	cbnz	r3, 80044f6 <_svfiprintf_r+0x36>
 80044d8:	2140      	movs	r1, #64	@ 0x40
 80044da:	f7ff ff09 	bl	80042f0 <_malloc_r>
 80044de:	6028      	str	r0, [r5, #0]
 80044e0:	6128      	str	r0, [r5, #16]
 80044e2:	b930      	cbnz	r0, 80044f2 <_svfiprintf_r+0x32>
 80044e4:	230c      	movs	r3, #12
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	b01d      	add	sp, #116	@ 0x74
 80044ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f2:	2340      	movs	r3, #64	@ 0x40
 80044f4:	616b      	str	r3, [r5, #20]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fa:	2320      	movs	r3, #32
 80044fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004500:	f8cd 800c 	str.w	r8, [sp, #12]
 8004504:	2330      	movs	r3, #48	@ 0x30
 8004506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046a4 <_svfiprintf_r+0x1e4>
 800450a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800450e:	f04f 0901 	mov.w	r9, #1
 8004512:	4623      	mov	r3, r4
 8004514:	469a      	mov	sl, r3
 8004516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451a:	b10a      	cbz	r2, 8004520 <_svfiprintf_r+0x60>
 800451c:	2a25      	cmp	r2, #37	@ 0x25
 800451e:	d1f9      	bne.n	8004514 <_svfiprintf_r+0x54>
 8004520:	ebba 0b04 	subs.w	fp, sl, r4
 8004524:	d00b      	beq.n	800453e <_svfiprintf_r+0x7e>
 8004526:	465b      	mov	r3, fp
 8004528:	4622      	mov	r2, r4
 800452a:	4629      	mov	r1, r5
 800452c:	4638      	mov	r0, r7
 800452e:	f7ff ff6b 	bl	8004408 <__ssputs_r>
 8004532:	3001      	adds	r0, #1
 8004534:	f000 80a7 	beq.w	8004686 <_svfiprintf_r+0x1c6>
 8004538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800453a:	445a      	add	r2, fp
 800453c:	9209      	str	r2, [sp, #36]	@ 0x24
 800453e:	f89a 3000 	ldrb.w	r3, [sl]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 809f 	beq.w	8004686 <_svfiprintf_r+0x1c6>
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 32ff 	mov.w	r2, #4294967295
 800454e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004552:	f10a 0a01 	add.w	sl, sl, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800455e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004560:	4654      	mov	r4, sl
 8004562:	2205      	movs	r2, #5
 8004564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004568:	484e      	ldr	r0, [pc, #312]	@ (80046a4 <_svfiprintf_r+0x1e4>)
 800456a:	f7fb fe51 	bl	8000210 <memchr>
 800456e:	9a04      	ldr	r2, [sp, #16]
 8004570:	b9d8      	cbnz	r0, 80045aa <_svfiprintf_r+0xea>
 8004572:	06d0      	lsls	r0, r2, #27
 8004574:	bf44      	itt	mi
 8004576:	2320      	movmi	r3, #32
 8004578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800457c:	0711      	lsls	r1, r2, #28
 800457e:	bf44      	itt	mi
 8004580:	232b      	movmi	r3, #43	@ 0x2b
 8004582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004586:	f89a 3000 	ldrb.w	r3, [sl]
 800458a:	2b2a      	cmp	r3, #42	@ 0x2a
 800458c:	d015      	beq.n	80045ba <_svfiprintf_r+0xfa>
 800458e:	9a07      	ldr	r2, [sp, #28]
 8004590:	4654      	mov	r4, sl
 8004592:	2000      	movs	r0, #0
 8004594:	f04f 0c0a 	mov.w	ip, #10
 8004598:	4621      	mov	r1, r4
 800459a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459e:	3b30      	subs	r3, #48	@ 0x30
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	d94b      	bls.n	800463c <_svfiprintf_r+0x17c>
 80045a4:	b1b0      	cbz	r0, 80045d4 <_svfiprintf_r+0x114>
 80045a6:	9207      	str	r2, [sp, #28]
 80045a8:	e014      	b.n	80045d4 <_svfiprintf_r+0x114>
 80045aa:	eba0 0308 	sub.w	r3, r0, r8
 80045ae:	fa09 f303 	lsl.w	r3, r9, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	46a2      	mov	sl, r4
 80045b8:	e7d2      	b.n	8004560 <_svfiprintf_r+0xa0>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	1d19      	adds	r1, r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	9103      	str	r1, [sp, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfbb      	ittet	lt
 80045c6:	425b      	neglt	r3, r3
 80045c8:	f042 0202 	orrlt.w	r2, r2, #2
 80045cc:	9307      	strge	r3, [sp, #28]
 80045ce:	9307      	strlt	r3, [sp, #28]
 80045d0:	bfb8      	it	lt
 80045d2:	9204      	strlt	r2, [sp, #16]
 80045d4:	7823      	ldrb	r3, [r4, #0]
 80045d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80045d8:	d10a      	bne.n	80045f0 <_svfiprintf_r+0x130>
 80045da:	7863      	ldrb	r3, [r4, #1]
 80045dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80045de:	d132      	bne.n	8004646 <_svfiprintf_r+0x186>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	1d1a      	adds	r2, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	9203      	str	r2, [sp, #12]
 80045e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045ec:	3402      	adds	r4, #2
 80045ee:	9305      	str	r3, [sp, #20]
 80045f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046b4 <_svfiprintf_r+0x1f4>
 80045f4:	7821      	ldrb	r1, [r4, #0]
 80045f6:	2203      	movs	r2, #3
 80045f8:	4650      	mov	r0, sl
 80045fa:	f7fb fe09 	bl	8000210 <memchr>
 80045fe:	b138      	cbz	r0, 8004610 <_svfiprintf_r+0x150>
 8004600:	9b04      	ldr	r3, [sp, #16]
 8004602:	eba0 000a 	sub.w	r0, r0, sl
 8004606:	2240      	movs	r2, #64	@ 0x40
 8004608:	4082      	lsls	r2, r0
 800460a:	4313      	orrs	r3, r2
 800460c:	3401      	adds	r4, #1
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004614:	4824      	ldr	r0, [pc, #144]	@ (80046a8 <_svfiprintf_r+0x1e8>)
 8004616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800461a:	2206      	movs	r2, #6
 800461c:	f7fb fdf8 	bl	8000210 <memchr>
 8004620:	2800      	cmp	r0, #0
 8004622:	d036      	beq.n	8004692 <_svfiprintf_r+0x1d2>
 8004624:	4b21      	ldr	r3, [pc, #132]	@ (80046ac <_svfiprintf_r+0x1ec>)
 8004626:	bb1b      	cbnz	r3, 8004670 <_svfiprintf_r+0x1b0>
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	3307      	adds	r3, #7
 800462c:	f023 0307 	bic.w	r3, r3, #7
 8004630:	3308      	adds	r3, #8
 8004632:	9303      	str	r3, [sp, #12]
 8004634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004636:	4433      	add	r3, r6
 8004638:	9309      	str	r3, [sp, #36]	@ 0x24
 800463a:	e76a      	b.n	8004512 <_svfiprintf_r+0x52>
 800463c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004640:	460c      	mov	r4, r1
 8004642:	2001      	movs	r0, #1
 8004644:	e7a8      	b.n	8004598 <_svfiprintf_r+0xd8>
 8004646:	2300      	movs	r3, #0
 8004648:	3401      	adds	r4, #1
 800464a:	9305      	str	r3, [sp, #20]
 800464c:	4619      	mov	r1, r3
 800464e:	f04f 0c0a 	mov.w	ip, #10
 8004652:	4620      	mov	r0, r4
 8004654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004658:	3a30      	subs	r2, #48	@ 0x30
 800465a:	2a09      	cmp	r2, #9
 800465c:	d903      	bls.n	8004666 <_svfiprintf_r+0x1a6>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0c6      	beq.n	80045f0 <_svfiprintf_r+0x130>
 8004662:	9105      	str	r1, [sp, #20]
 8004664:	e7c4      	b.n	80045f0 <_svfiprintf_r+0x130>
 8004666:	fb0c 2101 	mla	r1, ip, r1, r2
 800466a:	4604      	mov	r4, r0
 800466c:	2301      	movs	r3, #1
 800466e:	e7f0      	b.n	8004652 <_svfiprintf_r+0x192>
 8004670:	ab03      	add	r3, sp, #12
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	462a      	mov	r2, r5
 8004676:	4b0e      	ldr	r3, [pc, #56]	@ (80046b0 <_svfiprintf_r+0x1f0>)
 8004678:	a904      	add	r1, sp, #16
 800467a:	4638      	mov	r0, r7
 800467c:	f3af 8000 	nop.w
 8004680:	1c42      	adds	r2, r0, #1
 8004682:	4606      	mov	r6, r0
 8004684:	d1d6      	bne.n	8004634 <_svfiprintf_r+0x174>
 8004686:	89ab      	ldrh	r3, [r5, #12]
 8004688:	065b      	lsls	r3, r3, #25
 800468a:	f53f af2d 	bmi.w	80044e8 <_svfiprintf_r+0x28>
 800468e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004690:	e72c      	b.n	80044ec <_svfiprintf_r+0x2c>
 8004692:	ab03      	add	r3, sp, #12
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	462a      	mov	r2, r5
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <_svfiprintf_r+0x1f0>)
 800469a:	a904      	add	r1, sp, #16
 800469c:	4638      	mov	r0, r7
 800469e:	f000 f879 	bl	8004794 <_printf_i>
 80046a2:	e7ed      	b.n	8004680 <_svfiprintf_r+0x1c0>
 80046a4:	080053b5 	.word	0x080053b5
 80046a8:	080053bf 	.word	0x080053bf
 80046ac:	00000000 	.word	0x00000000
 80046b0:	08004409 	.word	0x08004409
 80046b4:	080053bb 	.word	0x080053bb

080046b8 <_printf_common>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	4616      	mov	r6, r2
 80046be:	4698      	mov	r8, r3
 80046c0:	688a      	ldr	r2, [r1, #8]
 80046c2:	690b      	ldr	r3, [r1, #16]
 80046c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bfb8      	it	lt
 80046cc:	4613      	movlt	r3, r2
 80046ce:	6033      	str	r3, [r6, #0]
 80046d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046d4:	4607      	mov	r7, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	b10a      	cbz	r2, 80046de <_printf_common+0x26>
 80046da:	3301      	adds	r3, #1
 80046dc:	6033      	str	r3, [r6, #0]
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	0699      	lsls	r1, r3, #26
 80046e2:	bf42      	ittt	mi
 80046e4:	6833      	ldrmi	r3, [r6, #0]
 80046e6:	3302      	addmi	r3, #2
 80046e8:	6033      	strmi	r3, [r6, #0]
 80046ea:	6825      	ldr	r5, [r4, #0]
 80046ec:	f015 0506 	ands.w	r5, r5, #6
 80046f0:	d106      	bne.n	8004700 <_printf_common+0x48>
 80046f2:	f104 0a19 	add.w	sl, r4, #25
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	6832      	ldr	r2, [r6, #0]
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	42ab      	cmp	r3, r5
 80046fe:	dc26      	bgt.n	800474e <_printf_common+0x96>
 8004700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	3b00      	subs	r3, #0
 8004708:	bf18      	it	ne
 800470a:	2301      	movne	r3, #1
 800470c:	0692      	lsls	r2, r2, #26
 800470e:	d42b      	bmi.n	8004768 <_printf_common+0xb0>
 8004710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004714:	4641      	mov	r1, r8
 8004716:	4638      	mov	r0, r7
 8004718:	47c8      	blx	r9
 800471a:	3001      	adds	r0, #1
 800471c:	d01e      	beq.n	800475c <_printf_common+0xa4>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	6922      	ldr	r2, [r4, #16]
 8004722:	f003 0306 	and.w	r3, r3, #6
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf02      	ittt	eq
 800472a:	68e5      	ldreq	r5, [r4, #12]
 800472c:	6833      	ldreq	r3, [r6, #0]
 800472e:	1aed      	subeq	r5, r5, r3
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	bf0c      	ite	eq
 8004734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004738:	2500      	movne	r5, #0
 800473a:	4293      	cmp	r3, r2
 800473c:	bfc4      	itt	gt
 800473e:	1a9b      	subgt	r3, r3, r2
 8004740:	18ed      	addgt	r5, r5, r3
 8004742:	2600      	movs	r6, #0
 8004744:	341a      	adds	r4, #26
 8004746:	42b5      	cmp	r5, r6
 8004748:	d11a      	bne.n	8004780 <_printf_common+0xc8>
 800474a:	2000      	movs	r0, #0
 800474c:	e008      	b.n	8004760 <_printf_common+0xa8>
 800474e:	2301      	movs	r3, #1
 8004750:	4652      	mov	r2, sl
 8004752:	4641      	mov	r1, r8
 8004754:	4638      	mov	r0, r7
 8004756:	47c8      	blx	r9
 8004758:	3001      	adds	r0, #1
 800475a:	d103      	bne.n	8004764 <_printf_common+0xac>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	3501      	adds	r5, #1
 8004766:	e7c6      	b.n	80046f6 <_printf_common+0x3e>
 8004768:	18e1      	adds	r1, r4, r3
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	2030      	movs	r0, #48	@ 0x30
 800476e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004772:	4422      	add	r2, r4
 8004774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800477c:	3302      	adds	r3, #2
 800477e:	e7c7      	b.n	8004710 <_printf_common+0x58>
 8004780:	2301      	movs	r3, #1
 8004782:	4622      	mov	r2, r4
 8004784:	4641      	mov	r1, r8
 8004786:	4638      	mov	r0, r7
 8004788:	47c8      	blx	r9
 800478a:	3001      	adds	r0, #1
 800478c:	d0e6      	beq.n	800475c <_printf_common+0xa4>
 800478e:	3601      	adds	r6, #1
 8004790:	e7d9      	b.n	8004746 <_printf_common+0x8e>
	...

08004794 <_printf_i>:
 8004794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	7e0f      	ldrb	r7, [r1, #24]
 800479a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800479c:	2f78      	cmp	r7, #120	@ 0x78
 800479e:	4691      	mov	r9, r2
 80047a0:	4680      	mov	r8, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	469a      	mov	sl, r3
 80047a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047aa:	d807      	bhi.n	80047bc <_printf_i+0x28>
 80047ac:	2f62      	cmp	r7, #98	@ 0x62
 80047ae:	d80a      	bhi.n	80047c6 <_printf_i+0x32>
 80047b0:	2f00      	cmp	r7, #0
 80047b2:	f000 80d1 	beq.w	8004958 <_printf_i+0x1c4>
 80047b6:	2f58      	cmp	r7, #88	@ 0x58
 80047b8:	f000 80b8 	beq.w	800492c <_printf_i+0x198>
 80047bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c4:	e03a      	b.n	800483c <_printf_i+0xa8>
 80047c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ca:	2b15      	cmp	r3, #21
 80047cc:	d8f6      	bhi.n	80047bc <_printf_i+0x28>
 80047ce:	a101      	add	r1, pc, #4	@ (adr r1, 80047d4 <_printf_i+0x40>)
 80047d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d4:	0800482d 	.word	0x0800482d
 80047d8:	08004841 	.word	0x08004841
 80047dc:	080047bd 	.word	0x080047bd
 80047e0:	080047bd 	.word	0x080047bd
 80047e4:	080047bd 	.word	0x080047bd
 80047e8:	080047bd 	.word	0x080047bd
 80047ec:	08004841 	.word	0x08004841
 80047f0:	080047bd 	.word	0x080047bd
 80047f4:	080047bd 	.word	0x080047bd
 80047f8:	080047bd 	.word	0x080047bd
 80047fc:	080047bd 	.word	0x080047bd
 8004800:	0800493f 	.word	0x0800493f
 8004804:	0800486b 	.word	0x0800486b
 8004808:	080048f9 	.word	0x080048f9
 800480c:	080047bd 	.word	0x080047bd
 8004810:	080047bd 	.word	0x080047bd
 8004814:	08004961 	.word	0x08004961
 8004818:	080047bd 	.word	0x080047bd
 800481c:	0800486b 	.word	0x0800486b
 8004820:	080047bd 	.word	0x080047bd
 8004824:	080047bd 	.word	0x080047bd
 8004828:	08004901 	.word	0x08004901
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6032      	str	r2, [r6, #0]
 8004834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800483c:	2301      	movs	r3, #1
 800483e:	e09c      	b.n	800497a <_printf_i+0x1e6>
 8004840:	6833      	ldr	r3, [r6, #0]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1d19      	adds	r1, r3, #4
 8004846:	6031      	str	r1, [r6, #0]
 8004848:	0606      	lsls	r6, r0, #24
 800484a:	d501      	bpl.n	8004850 <_printf_i+0xbc>
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	e003      	b.n	8004858 <_printf_i+0xc4>
 8004850:	0645      	lsls	r5, r0, #25
 8004852:	d5fb      	bpl.n	800484c <_printf_i+0xb8>
 8004854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004858:	2d00      	cmp	r5, #0
 800485a:	da03      	bge.n	8004864 <_printf_i+0xd0>
 800485c:	232d      	movs	r3, #45	@ 0x2d
 800485e:	426d      	negs	r5, r5
 8004860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004864:	4858      	ldr	r0, [pc, #352]	@ (80049c8 <_printf_i+0x234>)
 8004866:	230a      	movs	r3, #10
 8004868:	e011      	b.n	800488e <_printf_i+0xfa>
 800486a:	6821      	ldr	r1, [r4, #0]
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	0608      	lsls	r0, r1, #24
 8004870:	f853 5b04 	ldr.w	r5, [r3], #4
 8004874:	d402      	bmi.n	800487c <_printf_i+0xe8>
 8004876:	0649      	lsls	r1, r1, #25
 8004878:	bf48      	it	mi
 800487a:	b2ad      	uxthmi	r5, r5
 800487c:	2f6f      	cmp	r7, #111	@ 0x6f
 800487e:	4852      	ldr	r0, [pc, #328]	@ (80049c8 <_printf_i+0x234>)
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	bf14      	ite	ne
 8004884:	230a      	movne	r3, #10
 8004886:	2308      	moveq	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800488e:	6866      	ldr	r6, [r4, #4]
 8004890:	60a6      	str	r6, [r4, #8]
 8004892:	2e00      	cmp	r6, #0
 8004894:	db05      	blt.n	80048a2 <_printf_i+0x10e>
 8004896:	6821      	ldr	r1, [r4, #0]
 8004898:	432e      	orrs	r6, r5
 800489a:	f021 0104 	bic.w	r1, r1, #4
 800489e:	6021      	str	r1, [r4, #0]
 80048a0:	d04b      	beq.n	800493a <_printf_i+0x1a6>
 80048a2:	4616      	mov	r6, r2
 80048a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a8:	fb03 5711 	mls	r7, r3, r1, r5
 80048ac:	5dc7      	ldrb	r7, [r0, r7]
 80048ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b2:	462f      	mov	r7, r5
 80048b4:	42bb      	cmp	r3, r7
 80048b6:	460d      	mov	r5, r1
 80048b8:	d9f4      	bls.n	80048a4 <_printf_i+0x110>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d10b      	bne.n	80048d6 <_printf_i+0x142>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	07df      	lsls	r7, r3, #31
 80048c2:	d508      	bpl.n	80048d6 <_printf_i+0x142>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bfde      	ittt	le
 80048cc:	2330      	movle	r3, #48	@ 0x30
 80048ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048d6:	1b92      	subs	r2, r2, r6
 80048d8:	6122      	str	r2, [r4, #16]
 80048da:	f8cd a000 	str.w	sl, [sp]
 80048de:	464b      	mov	r3, r9
 80048e0:	aa03      	add	r2, sp, #12
 80048e2:	4621      	mov	r1, r4
 80048e4:	4640      	mov	r0, r8
 80048e6:	f7ff fee7 	bl	80046b8 <_printf_common>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d14a      	bne.n	8004984 <_printf_i+0x1f0>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	b004      	add	sp, #16
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	f043 0320 	orr.w	r3, r3, #32
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	4832      	ldr	r0, [pc, #200]	@ (80049cc <_printf_i+0x238>)
 8004902:	2778      	movs	r7, #120	@ 0x78
 8004904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	061f      	lsls	r7, r3, #24
 800490e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004912:	d402      	bmi.n	800491a <_printf_i+0x186>
 8004914:	065f      	lsls	r7, r3, #25
 8004916:	bf48      	it	mi
 8004918:	b2ad      	uxthmi	r5, r5
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	07d9      	lsls	r1, r3, #31
 800491e:	bf44      	itt	mi
 8004920:	f043 0320 	orrmi.w	r3, r3, #32
 8004924:	6023      	strmi	r3, [r4, #0]
 8004926:	b11d      	cbz	r5, 8004930 <_printf_i+0x19c>
 8004928:	2310      	movs	r3, #16
 800492a:	e7ad      	b.n	8004888 <_printf_i+0xf4>
 800492c:	4826      	ldr	r0, [pc, #152]	@ (80049c8 <_printf_i+0x234>)
 800492e:	e7e9      	b.n	8004904 <_printf_i+0x170>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	e7f6      	b.n	8004928 <_printf_i+0x194>
 800493a:	4616      	mov	r6, r2
 800493c:	e7bd      	b.n	80048ba <_printf_i+0x126>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6961      	ldr	r1, [r4, #20]
 8004944:	1d18      	adds	r0, r3, #4
 8004946:	6030      	str	r0, [r6, #0]
 8004948:	062e      	lsls	r6, r5, #24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	d501      	bpl.n	8004952 <_printf_i+0x1be>
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	e002      	b.n	8004958 <_printf_i+0x1c4>
 8004952:	0668      	lsls	r0, r5, #25
 8004954:	d5fb      	bpl.n	800494e <_printf_i+0x1ba>
 8004956:	8019      	strh	r1, [r3, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	4616      	mov	r6, r2
 800495e:	e7bc      	b.n	80048da <_printf_i+0x146>
 8004960:	6833      	ldr	r3, [r6, #0]
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	6032      	str	r2, [r6, #0]
 8004966:	681e      	ldr	r6, [r3, #0]
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	2100      	movs	r1, #0
 800496c:	4630      	mov	r0, r6
 800496e:	f7fb fc4f 	bl	8000210 <memchr>
 8004972:	b108      	cbz	r0, 8004978 <_printf_i+0x1e4>
 8004974:	1b80      	subs	r0, r0, r6
 8004976:	6060      	str	r0, [r4, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2300      	movs	r3, #0
 800497e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004982:	e7aa      	b.n	80048da <_printf_i+0x146>
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	4632      	mov	r2, r6
 8004988:	4649      	mov	r1, r9
 800498a:	4640      	mov	r0, r8
 800498c:	47d0      	blx	sl
 800498e:	3001      	adds	r0, #1
 8004990:	d0ad      	beq.n	80048ee <_printf_i+0x15a>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	079b      	lsls	r3, r3, #30
 8004996:	d413      	bmi.n	80049c0 <_printf_i+0x22c>
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	4298      	cmp	r0, r3
 800499e:	bfb8      	it	lt
 80049a0:	4618      	movlt	r0, r3
 80049a2:	e7a6      	b.n	80048f2 <_printf_i+0x15e>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4632      	mov	r2, r6
 80049a8:	4649      	mov	r1, r9
 80049aa:	4640      	mov	r0, r8
 80049ac:	47d0      	blx	sl
 80049ae:	3001      	adds	r0, #1
 80049b0:	d09d      	beq.n	80048ee <_printf_i+0x15a>
 80049b2:	3501      	adds	r5, #1
 80049b4:	68e3      	ldr	r3, [r4, #12]
 80049b6:	9903      	ldr	r1, [sp, #12]
 80049b8:	1a5b      	subs	r3, r3, r1
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dcf2      	bgt.n	80049a4 <_printf_i+0x210>
 80049be:	e7eb      	b.n	8004998 <_printf_i+0x204>
 80049c0:	2500      	movs	r5, #0
 80049c2:	f104 0619 	add.w	r6, r4, #25
 80049c6:	e7f5      	b.n	80049b4 <_printf_i+0x220>
 80049c8:	080053c6 	.word	0x080053c6
 80049cc:	080053d7 	.word	0x080053d7

080049d0 <memmove>:
 80049d0:	4288      	cmp	r0, r1
 80049d2:	b510      	push	{r4, lr}
 80049d4:	eb01 0402 	add.w	r4, r1, r2
 80049d8:	d902      	bls.n	80049e0 <memmove+0x10>
 80049da:	4284      	cmp	r4, r0
 80049dc:	4623      	mov	r3, r4
 80049de:	d807      	bhi.n	80049f0 <memmove+0x20>
 80049e0:	1e43      	subs	r3, r0, #1
 80049e2:	42a1      	cmp	r1, r4
 80049e4:	d008      	beq.n	80049f8 <memmove+0x28>
 80049e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ee:	e7f8      	b.n	80049e2 <memmove+0x12>
 80049f0:	4402      	add	r2, r0
 80049f2:	4601      	mov	r1, r0
 80049f4:	428a      	cmp	r2, r1
 80049f6:	d100      	bne.n	80049fa <memmove+0x2a>
 80049f8:	bd10      	pop	{r4, pc}
 80049fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a02:	e7f7      	b.n	80049f4 <memmove+0x24>

08004a04 <_sbrk_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	@ (8004a20 <_sbrk_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fd f9c6 	bl	8001da0 <_sbrk>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_sbrk_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_sbrk_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	200003cc 	.word	0x200003cc

08004a24 <memcpy>:
 8004a24:	440a      	add	r2, r1
 8004a26:	4291      	cmp	r1, r2
 8004a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	4770      	bx	lr
 8004a30:	b510      	push	{r4, lr}
 8004a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d1f9      	bne.n	8004a32 <memcpy+0xe>
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <_realloc_r>:
 8004a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	4607      	mov	r7, r0
 8004a46:	4614      	mov	r4, r2
 8004a48:	460d      	mov	r5, r1
 8004a4a:	b921      	cbnz	r1, 8004a56 <_realloc_r+0x16>
 8004a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a50:	4611      	mov	r1, r2
 8004a52:	f7ff bc4d 	b.w	80042f0 <_malloc_r>
 8004a56:	b92a      	cbnz	r2, 8004a64 <_realloc_r+0x24>
 8004a58:	f7ff fbde 	bl	8004218 <_free_r>
 8004a5c:	4625      	mov	r5, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a64:	f000 f81a 	bl	8004a9c <_malloc_usable_size_r>
 8004a68:	4284      	cmp	r4, r0
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	d802      	bhi.n	8004a74 <_realloc_r+0x34>
 8004a6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a72:	d8f4      	bhi.n	8004a5e <_realloc_r+0x1e>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4638      	mov	r0, r7
 8004a78:	f7ff fc3a 	bl	80042f0 <_malloc_r>
 8004a7c:	4680      	mov	r8, r0
 8004a7e:	b908      	cbnz	r0, 8004a84 <_realloc_r+0x44>
 8004a80:	4645      	mov	r5, r8
 8004a82:	e7ec      	b.n	8004a5e <_realloc_r+0x1e>
 8004a84:	42b4      	cmp	r4, r6
 8004a86:	4622      	mov	r2, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	bf28      	it	cs
 8004a8c:	4632      	movcs	r2, r6
 8004a8e:	f7ff ffc9 	bl	8004a24 <memcpy>
 8004a92:	4629      	mov	r1, r5
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff fbbf 	bl	8004218 <_free_r>
 8004a9a:	e7f1      	b.n	8004a80 <_realloc_r+0x40>

08004a9c <_malloc_usable_size_r>:
 8004a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa0:	1f18      	subs	r0, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfbc      	itt	lt
 8004aa6:	580b      	ldrlt	r3, [r1, r0]
 8004aa8:	18c0      	addlt	r0, r0, r3
 8004aaa:	4770      	bx	lr

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
